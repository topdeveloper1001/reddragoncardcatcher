message Club {
    required uint32 id = 1;
    required uint32 presidentId = 2; 
    required string presidentName = 3; 
    required string logoUrl = 4; 
    required string imageUrls = 5; 
    required string describe = 6; 
    required string name = 7; 
    required uint32 playerNumber = 8; 
    required uint32 active = 9; 
    required uint64 createTime = 10; 
    required int64 masterScores = 11; 
    required string region = 12; 
    required string businessCard = 13; 
    optional int64 masterScoresThreshold = 14;
    required bool masterScoresThresholdSwitch = 15;
    required uint32 totalPlayerNumbers = 16;
    required uint64 masterScoresTime = 17;
    required uint32 maxPlayerNumber = 18;
    required float price = 19;
    required string presidentHead = 20;
    required uint32 showGame = 21;
    required uint32 reduction = 22;
    optional int32 roomCount = 23; 
    optional int32 clubRoomSwitch = 24; 
    required int32 masterScoreLock = 25;
}

message ClubNamePriceReq{
        required uint32 clubId = 1;
}

message ClubNamePriceRes{
         required uint32 namePrice = 1;
}

message ClubReq{
       required uint32 num = 1;
       required uint32 clubId = 2;
}

message ClubRes{
       optional Club club = 1;
       required Corpus corpus = 2; 
       repeated ClubPlayer clubPlayers = 3;
}

message ClubUpdateReq{
        required uint32 clubId = 1;
        optional string name = 2;
        optional string region = 3;
        required string imageUrls = 4;
        optional string logoUrl = 5;
        optional string describe = 6;
}

message ClubUpdateRes{
        required uint32 clubId = 1;
        optional string name = 2;
        optional string region = 3;
        required string imageUrls = 4;
        optional string logoUrl = 5;
        optional string describe = 6;
}

message ClubUpdateResN{
        required uint32 clubId = 1;
        optional string name = 2;
        optional string region = 3;
        required string imageUrls = 4;
        optional string logoUrl = 5;
        optional string describe = 6;
}

message IncreaseClubMemberReq{
        required uint32 clubId = 1;
        required uint32 num = 2;
}

message IncreaseClubMemberRes{
         required uint32 totalPlayerNumbers = 1;
}

message IncreaseClubMemberResN{
         required uint32 totalPlayerNumbers = 1;
}

message SettingClubFundReq{
        required uint32 clubId = 1;
        required uint32 tagetClubId = 2;
        optional int64 masterScoresThreshold = 3;
        optional bool masterScoresThresholdSwitch = 4;
}

message SettingClubFundRes{
         optional int64 masterScoresThreshold = 1;
         optional bool masterScoresThresholdSwitch = 2;
}

message SettingClubFundResN{
         optional int64 masterScoresThreshold = 1;
         optional bool masterScoresThresholdSwitch = 2;
}

message ChangeClubMasterScoreLockState {
    required uint32 clubId = 1;
    required uint32 playerId = 2;
}

message ClubMasterScoreLockState {
    required uint32 clubId = 1;
    required int32 masterScoreLock = 2;
}

message ProvideClubMasterScore {
    required uint32 clubId = 1;
    required uint32 type = 2;
    required uint32 targetId = 3;
    required uint64 value = 4;
}

message ProvideClubMasterScoreRes {
    required uint32 type = 1;
    required uint32 targetId = 2;
    required int64 masterScores = 3;
    required int64 targetmasterScores = 4;
}

message ProvideClubMasterScoreNotify {
    required uint32 type = 1;
    required uint32 targetId = 2;
    required int64 masterScores = 3;
    required int64 targetmasterScores = 4;
}

message GetUpperClubIdAndNameReq {
    required uint32 clubId = 1;
}

message GetUpperClubIdAndNameRes {
    required uint32 clubId = 1;
    required string businessCard = 2;
    required string logoUrl = 3;
    required string clubName = 4;
}

message ContributeMasterScoreToClub {
    required uint32 id = 1;
    required uint32 type = 2;
    required uint32 clubId = 3;
    required uint64 value = 4;
}

message ManageClubFundReq{
    required uint32 clubId = 1;
    required uint32 type = 2;
    required uint32 targetId = 3;
    required int64 value = 4;
}

message ManageClubFundRes{
         required uint32 type = 1;
         required uint32 targetId = 2;
         required int64 masterScores = 3;
         required int64 targetmasterScores = 4;

}

message ManageClubFundResN{
         required uint32 type = 1;
         required uint32 targetId = 2;
         required int64 masterScores = 3;
         optional int64 targetmasterScores = 4;
}

message ManageClubFundStatusReq{
         required uint32 clubId = 1;
         required uint32 type = 2;
         required uint32 targetId = 3;
         required uint32 status = 4;
}

message ManageClubFundStatusRes{
        required uint32 type = 1;
        required uint32 targetId = 2;
        required uint32 status = 3;
}

message ManageClubFundStatusResN{
         required uint32 type = 1;
         required uint32 targetId = 2;
         required uint32 status = 3;
}

message LowerClubsReq{
        required uint32 clubId = 1;
        required uint32 num = 2;
        required uint32 currentNum = 3;
}
message LowerClubsRes{
        repeated Club clubs = 1;
        required uint32 total = 2;
        required uint32 remain = 3;
}

message ManagerClubAuthorityReq{
        required uint32 clubId = 1;
        required uint32 targetPalyerId = 2;
        required Corpus corpus = 3;
}

message ManagerClubAuthorityRes{
        required uint32 targetPalyerId = 1;
        required Corpus corpus = 2;
}

message ManagerClubAuthorityResN{
        required uint32 targetPalyerId = 1;
        required Corpus corpus = 2;
}

message ClubMemberReq{
        required uint32 clubId = 1;
        required uint32 num = 2;
        required uint32 currentNum = 3;
        optional uint32 condition = 4;
        optional string value = 5;
}
message ClubMemberRes{
        repeated ClubPlayer clubPlayers = 1;
        required uint32 total = 2;
        required uint32 remain = 3;
}

message ClubMemberChangeResN{
        required uint32 currentPlayerNumber = 1;
}

message MasterScoreDetailReq {
    required sint32 clubId = 1;
    required sint32 page = 2;
    required sint32 pageSize = 3;
}

message MasterScoreDetailRes {
    required sint32 page = 1;
    repeated MasterScoreRecord masterScoreRecords = 2;
}

message MasterScoreRecordsReq {
    required sint32 clubId = 1;
    required sint32 page = 2;
    required sint32 pageSize = 3;
}

message MasterScoreRecordsRes {
    required sint32 page = 1;
    repeated MasterScoreRecord masterScoreRecords = 2;
}

message MasterScoreGainsReq{
    required sint32 clubId = 1;
}

message MasterScoreGainsRes {
   repeated MasterScoreGainsData masterScoreGainsData =1;
}

message SubClubRebateReq {
    required int32 clubId = 1;
}

message SubClubRebateRes {
    repeated SubClubRebateData subClubRebate = 1;
}

message ClubPlayer {
    optional uint64 id = 1;
    optional uint32 playerId = 2; 
    optional string playerName = 3; 
    required Corpus playerDuties = 4; 
    optional uint64 joinClubTime = 5; 
    required string playerHeaderUrl = 6; 
    optional int64 masterScore = 7; 
    optional int64 diamond = 8; 
    optional uint32 masterScoreStatus = 9;
}

enum Corpus {
    PRESIDENT = 1; 
    MANAGER = 2; 
    OBSERVER = 3; 
    NORMAL = 4; 
    UNJOIN = 5; 
}

message GenerateCodeRequest {

}

message GenerateCodeResponse {

    required string code = 1;
}

message InviteCodeRequest {

    required int32 codeType = 1;
}

message InviteCodeResponse {

    required int32 codeType = 1;

    repeated InviteCode inviteCodes = 2;

    required string registerUrl = 3;

    required bool canGenSubClub = 4;

    required string clubName = 5;
}

message InviteCode {

    required string code = 1;

    required int32 status = 2;
}

message PsDefaultChangeClubReq{

    required string code = 1;

    required uint32 oldClubId = 2;

}

message PsDefaultChangeClubResp{
    required uint32 newClubId = 1;
    required string newClubName = 2;
}

message GetClubRoomTemplateReq{
    required uint32 clubId = 1;
}

message GetClubRoomTemplateResp{
    required uint32 clubId = 1;
    repeated ClubRoomTemplate clubRoomTemplate = 2;

}

message ClubRoomTemplate{
    required int32 id = 1;
    required int32 type = 2;
    required string blind = 3;
    required int32 playerCount = 4;
    required string bankroll = 5;
    required int32 time = 6;
    required int32 insurance = 7;
    required int32 straddle = 8;
    required int32 gps = 9;
    required int32 grant = 10;
    required string roomName = 11;
    optional int64 ante = 12;
    optional int32 dealerMultiple = 13;
    optional int32 canBringOut = 16;
    optional float minKeepMultiple = 17;
    optional float bringOutMultiple = 18;
}

message DeleteClubRoomTemplateReq{
    required uint32 clubId = 1;
    required int32 id = 2;
}

message DeleteClubRoomTemplateResp{
    required int32 state = 1;
    required int32 id = 2;
}

message CreateClubRoomTemplateReq{
    required string roomName = 1;
    required int32 bb = 2;
    required int32 bankroll = 3;
    required int32 playerCount = 4;
    required int32 keepTime = 5;
    required int32 ante = 6;
    required int32 multiple = 7;
    required int32 thinkTime = 8;
    required int32 insurance = 9;
    required int32 straddle = 10;
    required int32 gpsIp = 11;
    required int32 clubId = 12;
    required int32 clubRoomApproveSwitch = 13;
    required int32 sb = 14;
    required int32 dealerMultiple = 15;
    required int32 canBringOut = 16;
    required float minKeepMultiple = 17;
    required float bringOutMultiple = 18;
    required int32 playType = 19;
    required int32 raiseLimitFixed = 20;
    required float raiseLimitPot = 21;
}

message CreateClubRoomTemplateResp{
    required int32 state = 1;
}

message CreateClubRoomReq{
    required uint32 clubId = 1;
    required int32 id = 2;
}

message CreateClubRoomResp{
    required bool state = 1;
}

message ClubIncomeStaticsReq{
        required int32 clubId = 1;
}

message ClubIncomeStaticsRes{
        repeated ClubIncomeStatics clubIncomeStatics = 1;
}

message ClubIncomeStatics{
        required int32 timeType = 1;
        required int64 prebates = 2;
        required int64 pinsurance = 3;
        required int64 jpBonus =4;
        required int64 clubRaceData = 5;
}

message PlayerContributeToClubInfoReq{

}
message PlayerContributeToClubInfoRes{
    optional uint32 score = 1;
    optional uint32 toHonor = 2;
    optional float withdrawFee = 3;
}

message NotifyPlayerRoomDestory {

   required int32 roomId =1;

   required int32 gameId =2;

}

message NotifyGameOverResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    repeated GameResult gameResult = 4;

    required int32 handCount = 5;

    required int64 maxPot = 6;

    required int64 allBankroll = 7;

    required int64 gains = 8;

	required string createrName = 9;

	required string roomName = 10;

	required string createrIcon = 11;

	required int32 sitCount = 12;

	required string createTime = 13;

	required int64 bb = 14;

	required int32 gameTime = 15;

	required int32 roomType = 16;

    required int32 bankrollType = 17;

    required int32 insurance = 18;

    required int32 straddle = 19;

    optional int64 sb = 20;
}

message GameResult {

    required int32 playerId = 1;

    required string playerName = 2;

    required int64 initBankroll = 3;

    required int64 ganis = 4;

	required string icon = 5;

    optional int64 totalInsurance = 6;

    optional int32 handCount = 7;
}

message GameRule{

	required string applyCost = 1;

	required int64 initChip = 2;

	required sint32 actionCount = 3;

    required int32 signUpType = 4;
}

message NotifySngRewardResponse{

	repeated sngReward sngReward = 1;
	required GameRule gameRule = 2;
	required int32 gameId = 3;
	required int32 roomId = 4;

	required string createrName = 5;

	required string roomName = 6;

	required string createrIcon = 7;

	required int32 sitCount = 8;

	required string createTime = 9;

	required int64 bb = 10;

	required int32 gameTime = 11;

	required int32 roomType = 12;

    required int32 insurance = 13;

    required int32 straddle = 14;
}

message sngReward{

	required int32 rank =1;

	required int32 playerId = 2;

	required string playerName = 3;

	optional int32 rewardGold = 4;

	required string icon = 5;

	optional string rewardItems = 6;

}

message CareerRequest{
        required uint32 playerId = 1;
        required uint32 roomType = 2;
        required uint32 playType = 3;
        required uint32 dateType = 4;
        required uint32 reqType = 5;
}
message CareerResponse{
        optional CareerData careerData = 1;
        required CareerProcessData careerProcessData = 2;
}

message CareerData{
    required uint32 hands = 1;
    required uint32 winHands = 2; 
    required uint32 bets = 3; 
    required uint32 raises = 4;
    required uint32 calls = 5; 
    required uint32 threeBets = 6; 
    required string winBBs = 7;
    required string maxWinBBs = 8; 
    required int64 maxWinChips = 9; 
    required string maxCards = 10; 
    required int64 totalWinChips = 11; 
    required uint32 vps = 12; 
    required uint32 rounds = 13; 
    required uint32 steals = 14; 
    required uint32 winSteals = 15; 
    required uint32 otherSteals = 16; 
    required uint32 foldToSteals = 17; 
    required uint32 continueBets = 18; 
    required uint32 otherContinueBets = 19; 
    required uint32 foldToContinueBets = 20; 
    required uint32 flops = 21; 
    required uint32 turns = 22; 
    required uint32 rivers = 23; 
    required uint32 preFlopRaises = 24; 
    required uint32 wentToShutDowns = 25; 
    required uint32 winWentToShutDowns = 26; 
    required uint32 allins = 27; 
    required uint32 winAllins = 28; 
    required uint32 totalMatchs = 29; 
    required uint32 champions = 30; 
    required uint32 rewardCircles = 31; 
    required int64 totalLoseChip = 32; 
    required int64 totalRebuy = 33; 
    required uint32 vpWinHands = 34;
    required int32 rewardItemId = 35;
}

message CareerProcessData{
        required string vpWinRate = 1; 
        required string vpRate = 2; 
        required uint32 hands = 3; 
        required uint32 totalMatchs = 4; 
        required uint32 champions = 5; 
        required uint32 rewardCircles = 6; 
        required string winRate = 7; 
        required string aggressionFactor = 8;
        required string threeBetRate = 9; 
        required string stealRate = 10; 
        required string winStealRate = 11; 
        required string foldToStealRate = 12; 
        required string preFlopRaiseRate = 13; 
        required string continueBetRate = 14; 
        required string foldToContinuBetRate = 15; 
        required string wentToShowDownRate = 16; 
        required string winWentToShowDownRate = 17; 
        required string allinRate = 18; 
        required string allinWinRate = 19; 
        required string perWinBB = 20; 
        required string perRebuy = 21; 
        required int64 profit = 22;
        required int32 rewardItemId = 23;
}

enum ChatType {
    ChatClub = 1;
}

message ChatMessage {
    required uint64 id = 1;
    required ChatType type = 2;
    required string text = 3;
    required uint32 time = 4;
}

message ChatRequest {
    required ChatType type = 1;
    required string text = 2;

    oneof target {
        uint32 clubId = 10;
    }
}

message ChatResponse {
}

message ChatNotify {
    required ChatMessage message = 1;
    required uint32 playerId = 2;
}

message ClubNotify {
    required Club club = 1;
}

enum ApplStatus {
    WAIT = 1; 
    PASS = 2; 
    REFUSE = 3; 
    NOT_APPLY = 4; 
}

message ClubApplication {
    required uint32 id = 1;
    required uint32 applicationPlayerId = 2; 
    required string applicationPlayerName = 3; 
    required uint32 approveId = 4; 
    required string approveName = 5; 
    required string describe = 6; 
    required ApplStatus status = 7; 
    required uint32 clubId = 8; 
}

message OfficialRoom {
    required uint32 type = 1; 
    required uint32 bb = 2; 
    required string blind = 3; 
    optional bool isCheck = 4; 

    required int32 playType = 5;
}

message ClubCreateRequest {
    required string name = 1;
    required string region = 2;
    required string logoUrl = 3;
    required string imageUrl = 4;
    required string describe = 5;
    required uint32 rechargeNumber = 6;
    required string superiorClubId = 7; 
}

message ClubCreateResponse {
    repeated Club club = 1;
}

message AllOfficialRoomRequest {
    optional uint32 clubId = 1;
}

message AllOfficialRoomResponse {
    repeated OfficialRoom officialRoom = 1;
}

message SetClubOfficialRoomRequest {
    required uint32 clubId = 1;
    repeated OfficialRoom officialRoom = 2;
}

message SetClubOfficialRoomResponse {
}

message FindClubOfficealRoomRequest {
    required uint32 clubId = 1;
}

message FindClubOfficealRoomResponse {
    required uint32 clubId = 1;
    required string clubName = 2;
    repeated OfficialRoom officialRoom = 3;
}

message FindTableRequest {
    required uint32 clubId = 1;
    required string blind = 2;
    required uint32 page = 3;
    required uint32 pageSize = 4;
}

message FindTableResponse {
    repeated Room room = 3;
}

message FindAllTableRequest {
    required uint32 clubId = 1;
    required uint32 page = 3;
    required uint32 pageSize = 4;
}

message FindAllTableResponse {
    repeated Room room = 3;
}

message FindClubAndClubPlayersRequest {
    required uint32 clubId = 1;
    optional uint32 playerId = 2;
    optional uint32 page = 3;
    optional uint32 pageSize = 4;
    optional string type = 5; 
}

message FindClubAndClubPlayersResponse {
    required Club club = 1;
    repeated ClubPlayer clubPlayer = 2;
    optional ClubPlayer clubPlayerMe = 3;
}

message ClubUpdateRequest {
    required uint32 clubId = 1;
    optional string name = 2;
    optional string region = 3;
    optional string imageUrl = 4;
    optional string logoUrl = 5;
    optional string describe = 6;
    optional bool autoApproval = 7; 
}

message ClubUpdateResponse {
    required Club club = 1;
}

message ClubSearchRequest {
    optional uint32 page = 1;
    optional uint32 pageSize = 2;
    optional string clubIds = 3;
    optional string name = 4;
    optional string region = 5;
}

message ClubSearchResponse {
    required uint32 page = 1;
    repeated Club club = 2;
    repeated Club recommedClub = 3;
}

message FindClubPlayerRequest {
    required uint32 clubId = 1;
    required uint32 page = 2;
    required uint32 pageSize = 3;
    optional string playerName = 4;
}

message FindClubPlayerResponse {
    required uint32 page = 1;
    repeated ClubPlayer clubPlayer = 2;
}

message ApplyClubPlayerRequest {
    required uint32 clubId = 1;
    required string region = 2;
}

message ApplyClubPlayerResponse {
    optional bool auotApprove = 1; 
}

message ApproveClubPlayerRequest {
    required uint32 clubId = 1;
    required uint64 applyId = 2;
    required uint64 notifyId = 3;
    required ApplStatus status = 4;
}

message ApproveClubPlayerResponse {
}

message SetClubPlayerRequest {
    required uint32 clubId = 1;
    required uint32 playerId = 2;
    optional Corpus corpus = 3;
    optional string alias = 4;
}

message SetClubPlayerResponse {
}

message KickClubPlayerRequest {
    required uint32 clubId = 1;
    required uint32 playerId = 2;
}

message KickClubPlayerResponse {
}

message CancelClubRequest {
    required uint32 clubId = 1;
}

message CancelClubResponse {
}

message DissolutionClubRequest {
    required uint32 clubId = 1;
}

message DissolutionClubResponse {
}

message ClubKickOutNotify {
    required uint32 clubId = 1;
    required string clubName = 2;
}

message GiveClubActivityRequest {
    required string cardId = 1; 
    required uint32 clubId = 2; 
    required int32 clubActivity = 3; 
}

message GiveClubActivityResponse {
    required uint32 clubId = 1; 
    required int32 clubActivity = 2; 
    required int32 canGiveClubActivity = 3; 
}

message FindClubInfoRequest {
    required string cardID = 1;
}

message FindClubInfoResponse {
    required string cardId = 1;
    required uint32 clubId = 2;
    required string clubName = 3;
    required string clubIcon = 4;
}

message SubClubRebateRequest {
    required int32 clubId = 1;
}

message SubClubRebateResponse {
    repeated SubClubRebateData subClubRebate = 1;
}

message SubClubRebateData {
    required int32 clubCardId = 1;
    required string clubName = 2;

    required int32 lastDayRebate = 3;

    required int32 lastWeekRebate = 4;

    required int32 lastMonthRebate = 5;
}

message SetClubMasterScoreThresholdRequest {
    required uint32 clubId = 1; 
    required bool masterScoresThresholdSwitch = 2; 
    required sint32 masterScoresThreshold = 3; 
}
message SetClubMasterScoreThresholdResponse {
    required uint32 clubId = 1;
    required bool masterScoresThresholdSwitch = 2; 
    required sint32 masterScoresThreshold = 3;
}

message FindClubSinglePlayerRequest {

    required int32 clubId = 1;
}

message FindSingleClubPlayerResponse {
    required ClubPlayer clubPlayer = 1;
}

enum changeType {
    WITHDRAW = 1; 
    ADD = 2; 
    HELP_REPAY = 3; 
    REPAY = 4;
    USE = 5;
}

message HelpRepayCreditScoreRequest {
    required int32 clubId = 1;
    required int32 playId = 2;
    required uint32 creditScore = 3;
}

message HelpRepayCreditScoreResponse {
    required Club club = 1;
    required ClubPlayer clubPlayer = 2;
}

message AddClubCreditScoreRequest {
    required uint32 clubId = 1;
    required uint32 creditScore = 2;
}

message AddClubCreditScoreResponse {
    required uint32 clubId = 1;
    required uint32 creditScore = 2;
    required uint32 alreadyUseCreditScore = 3;
    required uint32 alreadyAllotCreditScore = 4;
    required uint32 masterScore = 5;
}

message WithdrawClubCreditScoreRequest {
    required uint32 clubId = 1;
    required uint32 creditScore = 2;
}

message WithdrawClubCreditScoreResponse {
    required uint32 clubId = 1;
    required uint32 creditScore = 2;
    required uint32 alreadyUseCreditScore = 3;
    required uint32 alreadyAllotCreditScore = 4;
    required uint32 masterScore = 5;
}

message AllotPlayerCreditScoreRequest {
    required uint32 clubId = 1;
    required uint32 playerId = 2;
    required uint32 creditScore = 3;
}

message AllotPlayerCreditScoreResponse {
    required Club club = 1;
    required ClubPlayer clubPlayer = 2;
}

message AllotPlayerCreditScoreNotify {
    optional Club club = 1;
    optional ClubPlayer clubPlayer = 2;
}

message RepayClubCreditScoreRequest {
    required uint32 clubId = 1;
    required uint32 playerId = 2;
    required uint32 creditScore = 3;
}

message RepayClubCreditScoreResponse {
    required uint32 clubId = 1;
    required uint32 playerId = 2;
    required uint32 creditScore = 3;
    required uint32 alreadyUseCreditScore = 4;
}

message RoomTypeEnum {
    enum ERoomType {
        noRoom = 0;
        sngRoom = 1;
        mttRoom = 2;
        nlRoom = 3;
    }
    optional Codes codes = 1 [default = noRoom];
}

message PlayerStateEnum{
   enum EPlayerState {
        nostate = 0;
        watching = 1;
        gameing = 2;
        allin = 3;
        fold = 4;
        rebuy = 5;
        keepsit = 6;
        sitdown = 7;
        sngover = 8;
    }
    optional Codes codes = 1 [default = nostate];
}

message ErrorMsg {
    enum Codes {
        Ok = 0;                                 
        Error = 1;                              
        ErrServerMaintenance = 2;               

        ErrPlayerNotFound = 1000;               
        ErrLogin = 1001;                        
        ErrRelogin = 1002;                      
        ErrPlayerPhoneExists = 1003;            
        ErrPlayerConnect = 1004;
        ErrPlayerTokenRequest = 1005;
        ErrPlayerCaptchaFrequently = 1006;
        ErrPlayerCaptchaRequest = 1007;
        ErrPlayerPlatformAuth = 1008;
        ErrPlayerPlatformCaptcha = 1009;
        ErrPlayerSignUp = 1010;
        ErrPlayerBindPhone = 1011;
        ErrPlayerChangePassword = 1012;
        ErrPlayerLoginRequest = 1013;
        ErrPlayerWechatLogin = 1014;
        ErrPlayerIconNoImageType = 1015;
        ErrPlayerIconSave = 1016;
        ErrPlayerEditInfo = 1017;
        ErrPlayerInfoRequest = 1018;
        ErrPlayerRoomsRequest = 1019;
        ErrPlayerLogout = 1020;
        ErrLoginTokenTimeOut = 1021;             
        ErrPlayerForbiddenNickname = 1022;       
        ErrPlayerCaptcha = 1023;
        ErrPlayerWechatAccessToken = 1024;
        ErrPlayerPassword = 1025;
        ErrPlayerWechatExists = 1026;
        ErrPlayerNameInvalidLength = 1027;
        ErrPlayerNameWithSpaces = 1028;
        ErrPlayerForbiddenSignature = 1029;     
        ErrPlayerInvalidPhone = 1030;           
        ErrPlayerVersionNotAllowed = 1031;      
        ErrPlayerVersionUpgrade = 1032;         
        ErrPlayerVersionRestart = 1033;         
        ErrPlayerInvalidToken = 1034;           
        ErrPlayerInvalidSessionKey = 1035;      
        ErrPlayerPhoneNotBound = 1036;          
        ErrPlayerUnbindPhone = 1037;            
        ErrPlayerGpsIp = 1038;                  
        ErrNotOpenGps = 1039;                   
        ErrPlayerEditCostNotEnough = 1040;      

        ErrInvalidCaptcha=1041;              
        ErrNotEqualP2Captcha=1042;              
        ErrP2NotCheckDaysInvalid=1043;          
        ErrP2IndexInvalid=1044;                 
        ErrP2NotCheckAmountInvalid=1045;        

        ErrPlayerNameRepeat = 1046;             
        ErrPlayerPhoneNotMatch = 1047;          
        ErrRetryTimeOver3= 1048;                
        ErrPlayerAlreadyFrozen = 1049;           
        ErrPlayerMasterScoreNotEnough = 1050;     
        ErrAccountDeviceLocked=1051;               
        ErrPlayerPhoneUsed = 1052;              
        ErrAccountChangeDeviceLimit = 1053;              

        ErrReconnectRoomNotFound = 1999;

        ErrRoomNotFound = 2000;                 
        ErrInvitationCode = 2001;               
        ErrJoinRoom = 2002;                     
        ErrCreateRoom = 2003;                   
        ErrConnectRoom = 2004;                  
        ErrSeatIsOccupied = 2005;               
        ErrPlayerNotInGame = 2006;              
        ErrSeatIsUnoccupied = 2007;             
        ErrSeatIsOthers = 2008;                 
        ErrSitDown = 2009;                      
        ErrStandUp = 2010;                      
        ErrStandUpFirst = 2011;                 
        ErrOutRoom = 2012;                      
        ErrNotRoomCreator = 2013;               
        ErrRoomState = 2014;                    
        ErrPlayersNotEnough = 2015;             
        ErrStartGame = 2016;                    
        ErrGameNotFound = 2017;                 
        ErrIllegalAction = 2018;                
        ErrGoldNotEnough = 2019;                
        ErrPlayerCall = 2020;                   
        ErrPlayerFold  = 2021;                  
        ErrPlayerCheck = 2022;                  
        ErrIllegalParameter = 2023;             
        ErrPlayerRaise = 2024;                  
        ErrPlayerAllIn = 2025;                  
        ErrRoomForbiddenName = 2026;            
        ErrMessageForbiddenWords = 2027;
        ErrSeatIsRebuying = 2028;               
        ErrDiamondsNotEnough = 2029;            
        ErrCreateRoomCeiling = 2030;            
        ErrNotUpToMinimumTableTime = 2031;      
        ErrAdvanceLeaveCannotGoTable = 2032;    
        ErrAdvanceSettle = 2033;                
        ErrPlayerHaveSit = 2034;                
        ErrShowCardState = 2035;                
        ErrShowCardTimes = 2036;                
        ErrShowCardHasDone = 2037;              
        ErrRoomNotOfferJp = 2038;              
        ErrBringOutTime=2039;                   
        ErrBringOutCount=2040;                   
        ErrBringOutRoomType=2041;                
        ErrBringOutNotMultiple=2042;             
        ErrBringOutNotEnoughScore=2043;          
        ErrBringOutOverMax=2044;                
        ErrBringOutNotAllow=2045;                
        ErrBringOutBankRollType=2046;            
        ErrBringOutPlayerInAction=2047;          

        ErrReplayNotFound = 3000;               
        ErrGetReplayList = 3001;                
        ErrGetReplay = 3002;                    
        ErrorVideoNotCollected = 3003;          
        ErrorVideoCollected = 3004;             
        ErrorVideoCollectedLimit = 3005;        

        ErrClubCreate = 4000;                   
        ErrCreateExceedMaxNumber = 4001;        
        ErrClubUpdate = 4002;                   
        ErrClubSearch = 4003;                   
        ErrAlreadyApply = 4004;                 
        ErrAlreadyJoin = 4005;                  
        ErrApply = 4006;                        
        ErrInsufficientAuthority = 4007;        
        ErrAlreadyApprove = 4008;               
        ErrClubNotFind = 4009;                  
        ErrClubPlayerTooMore = 4010;            
        ErrPlayerNotFind = 4011;                
        ErrKickVicePresident = 4012;            
        ErrKickOutSelf = 4013;                  
        ErrHasBecomeVicePresident = 4014;       
        ErrHasBecomeNormalPlayer = 4015;        
        ErrClubExistOtherPlayer = 4016;         
        ErrNotMoreJoin = 4017;                  
        ErrClubForbidden = 4018;                
        ErrAlreadyUseCreditScoreIsNotZero = 4019;
        ErrNoRepayment = 4020;                  
        ErrApproveNotMoreJoin = 4021;           
        ErrAgentClubNotFind = 4022;             
        ErrClubActivityBelowShow = 4023;        
        ErrClubActivityHandselNotEnough = 4024; 
        ErrMasterScoreThresholdAuthorityNotEnough=4025; 
        ErrMasterScoreThresholdNotAllowed=4026; 
        ErrClubAlreadyForbidden=4027;           
        ErrPlayerNotFoundInClUB = 40028;         
        ErrAuthorityNotEnough = 40029;           
        ErrTooLong = 40030;                      
        ErrClubMAXPlayerTooMore = 4031;           
        ErrClubName = 4032;                       
        ErrCodeMax = 4033;                       
        ErrProvideMasterScoreIsClosed = 4034;   
        ErrContributeMasterScoreIsClosed = 4035;   
        ErrRecommendClubCantContributeMasterScoreToSuperiorClub = 4036; 

        ErrMasterScoreNotMore = 4500;           
        ErrCreditScoreNotMore = 4501;           
        ErrPlayerCreditScoreNotMore = 4502;     
        ErrRepayCreditScoreTooMore = 4503;      
        ErrCreditOverAllocateMax = 4504;        
        ErrFreezeMasterScore = 4505;            
        ErrMasterScoreTooMore = 4506;           

        ErrChatRequest = 5000;
        ErrChatNotClubMember = 5001;
        ErrVoiceRoomNotFound = 5002;
        ErrVoiceRequest = 5003;

        ErrRoomType = 6000;
        ErrRoomList = 6001;

        ErrMallProductNotFound = 6100;
        ErrMallReceiptAuthFailed = 6101;
        ErrMallProductsRequest = 6102;
        ErrMallPaymentsRequest = 6103;
        ErrMallReceiptRequest = 6104;
        ErrMallInvalidPaymentId = 6105;
        ErrMallOrderRequest = 6106;
        ErrMallBuyRequest = 6107;
        ErrMallDiamondNotEnough = 6108;

        ErrMTTApplyNotExist = 7000;
        ErrMTTAlreadyApply = 7001;
        ErrMTTApplyCostNotEnough = 7002;
        ErrMTTApplyMax = 7003;
        ErrMTTApplyEndBlind = 7004;
        ErrMTTCancelApplyFail = 7005;
        ErrAdvanceLeaveTable = 7006; 
        ErrRaceClubRewardDeposit = 7007; 
        ErrClubNoApply = 7008; 

        ErrMTTEntryTimeout = 7010;

        ErrMTTEntryBlindExceed = 7011;

        ErrMTTEntryNumExceed = 7012;

        ErrMTTEntryCostNotEnough = 7013;

        ErrMTTReBuyChipIllegal = 7014;

        ErrItemNotEnough =7100;

        ErrHandselPlayerNotFind = 7101;

        ErrItemCanNotUse = 7102;

        ErrInteractionNoSit = 7103;

        ErrInteractionCostNoEnough = 7104;

        ErrShowEmojiNoSit = 7105;

        ErrCdKeyAlreadyUse = 7106;

        ErrCdKeyNotFind = 7017;

        ErrCdKeyOverdue = 7018;

        ErrItemCanNotRevert = 7019;

        ErrItemRevertFail = 7020;

        ErrItemNoMoreQRTicket = 7021;

        ErrInsuranceNotBuyPlayerId = 7200;

        ErrInsuranceNotChooseOuts = 7201;

        ErrInsuranceAmountIllegal = 7202;

        ErrInsuranceTimeout = 7203;

        ErrInsuranceMustBuyRiverCard = 7204;

        ErrInsuranceResetTimeCostNotEnough = 7205;

        ErrInsuranceResetTimeCountMax = 7206;

        ErrAddThinkTimeNotActionPlayer = 7210;

        ErrAddThinkTimeMaxCount = 7211;

        ErrAddThinkTimeCostNotEnough = 7212;

        ErrAddThinkTimeMaxTimePreRound = 7213;

        ErrKeepSitStatus = 7220;

        ErrCancelKeepSitStatus = 7221;

        ErrKeepSitMaxCount = 7222;

        ErrKeepSitCannotStandup = 7223;

        ErrReconnetc = 8000;

        ErrHandReviewnotFound = 8001;

        ErrRoomDestory = 8002;

        ErrRoomDestoryRebuy = 8003;

        ErrFrequentOperation = 8004;

        ErrRoomFinishing = 8005;

        ErrJoinOfficialCommonRoom = 9000;

        ErrJoinOfficialCommonRoomErrClubId = 9001;

        ErrClubRoomIsOpen = 9002;

        ErrNoneNotify=9050;

        ErrNotifyOutTime=9051;

        ErrNotSit=9052;

        ErrNotRebuy=9053;

        ErrDrawMax = 10000;

        ErrBankCard = 10001;

        ErrBankCardNum = 10002;

        ErrBankCardInfo = 10003;

        ErrDrawTime = 10004;

        ErrRepDrawOrderId = 10005;

        ErrDrawDayMax = 10006;

        ErrDrawUnKown = 10007;

        ErrDrawException = 10008;

        ErrWalletPwdRepeated = 10009;

        ErrGetOrderInfo = 10010;

        ErrWalletPasswordNotNull = 10011;

        ErrWalletPasswordNoEq = 10012;

        ErrDrawFail = 10013;

        ErrPayAmount =10014;

        ErrDrawAmount =10015;

        ErrPayClose = 10016;

        ErrDrawCount = 10017;

        ErrRedPacketActivityOver = 10018;
    }
    optional Codes codes = 1 [default = Ok];
    optional string msg = 2;
}

message NotifyGamePause {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required GmNotifyEnum gmNotifyEnum = 3;
}

message NotifyGameReStart {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required GmNotifyEnum gmNotifyEnum = 3;
}

message NotifyGameDelayed {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required GmNotifyEnum gmNotifyEnum = 3;

    required int32 delayedTime = 4; 
}

message NotifyGameErrorRestart {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required GmNotifyEnum gmNotifyEnum = 3;

}

message NotifyGameSettlement {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required GmNotifyEnum gmNotifyEnum = 3;

}

message NotifyGameKickPlayer {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required string playeName = 3;

    required GmNotifyEnum gmNotifyEnum = 4;

}

message NotifyGameCancelBan {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required string roomName = 3;

    required GmNotifyEnum gmNotifyEnum = 4;

}

message GmNotifyEnum {
    enum GmNotifyCodes {
        GAMEPAUSE = 1; 
        GAMERESTART = 2; 
        GAMEDELAYED = 3; 
        GAMEERRORRESTART = 4; 
        GAMESETTLEMENT = 5; 
        GAMEKICKPLAYER = 6; 
        GAMECANCELBAN = 7; 
        NOCODES = 8;
    }

    optional GmNotifyCodes gmNotifyCodes = 1 [default = NOCODES];
}

message HandReviewRequest {

   required int32 roomId =1;

   required int32 gameId =2;

   required int32 handCount = 3;
}

message HandReviewResponse {

	repeated HandReview handReview = 1;

	required int64 bb = 2;

	required int32 allHand= 3;

	required int32 currHand = 4;

    required int64 sb = 5;

    required bool isCollected = 6;

    required int32 collectedCount = 7;

    required int32 allCollectCount = 8;
}

message HandReview{

	required int32 sitId = 1;

	required string icon = 2;

	required string playerName = 3;

	required bool isDealer = 4;

	required bool bb = 5;

	required bool sb = 6;

	optional HandCard handCard = 7;

	optional FlopCard flopCard = 8;

	optional Card trunCard = 9;

	optional Card riverCard = 10;

	optional int32 handPower = 11;

	required int64 gains = 12;

	required int32 preflopAction = 13;

	required int64 preflopGains = 14;

	required int32 flopAction = 15;

	required int64 flopGains = 16;

	required int32 trunAction = 17;

	required int64 trunGains = 18;

	required int32 riverAction = 19;

	required int64 riverGains = 20;

    optional int64 buyInsurAmount = 21;

    optional int64 returnInsurAmount = 22;

    required bool straddle = 23;

    required int32 playerId = 24;
}

message HandCard2 {
	repeated Card card = 1;
}

message FlopCard{
	repeated Card card = 1;
}

message Card2 {

    required string cardSuit = 1;

    required int32 cardNumber = 2;
}

enum InsuranceOption {

    SelectOuts = 1;

    UnSelectOuts = 2;

    SelectAll = 3;

    UnSelectAll = 4;

    BuyAmount = 5;
}

enum NoInsuranceTips {

    NoTips = 0;

    NoOuts = 1;

    PotNoWinner = 2;

    OutsLimit = 3;

    OmahaPlayerCountLimit = 4;

    OmahaPotPlayerLimit = 5;
}

message TriggerInsuranceNotify {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;

    required int64 buyAmountMin = 4;

    required int64 buyAmountMax = 5;

    required int64 insurPot = 6;

    required int64 playerInPool = 7;

    required int32 restThinkTime = 8;

    repeated Card buyerHandCards = 9;

    repeated Card overtakeOutsCards = 10;

    repeated Odds odds = 11;

    required int32 resetTimeItemId = 12;

    required int32 resetTimeCostCount = 13;

    required int32 resetTime = 14;

    optional bool mustBuyAllOuts = 15;

    repeated Card equalOutsCards = 16;

    repeated InPoolPlayerHandCard inPoolPlayer = 17;

    repeated Pot pot = 18;

    required bool equalOutsLimit = 19;
}

message OptionBroadCastRequest {

    required InsuranceOption option = 1;

    required int32 roomId = 2;

    optional int32 outsCardNum = 3;

    optional int32 buyAmount = 4;
}

message OptionBroadCastResponse {

    required InsuranceOption option = 1;

    required int32 roomId = 2;

    optional int32 outsCardNum = 3;

    optional int32 buyAmount = 4;
}

message BuyInsuranceRequest {

    required int32 roomId = 1;

    required int64 buyAmount = 2;

    required int32 gameId = 3;

    required int32 playerId = 4;

    repeated int32 buyOutsCardNums = 5;
}

message BuyInsuranceResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;

    required int32 buyOutsCount = 4;

    required int64 buyAmount = 5;

    required int64 returnAmount = 6;
}

message UnbuyInsuranceRequest {

    required int32 roomId = 1;
}

message UnbuyInsuranceResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;
}

message ResetBuyThinkTimeRequest {

    required int32 roomId = 1;
}

message ResetBuyThinkTimeResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;

    required int32 restThinkTime = 4;

    required bool canReset = 5;

    optional int32 resetTimeItemId = 6;

    optional int32 resetTimeCostCount = 7;

    optional int32 resetTime = 8;
}

message InsuranceSettlementNotify {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;

    required bool isHitOuts = 4;

    optional int64 returnAmount = 5;
}

message InsuranceHoleCardNotify {

    required int32 roomId = 1;

    required int32 gameId = 2;

    repeated InPoolPlayerHandCard playerHandCard = 3;
}

message Card5 {

    required string cardSuit = 1;

    required int32 cardNumber = 2;
}

message Odds {

    required int32 cardCount = 1;

    required string odds = 2;
}

message InPoolPlayerHandCard {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 outsNum = 3;

    repeated Card handCards = 4;
}

message DoPlayerCallResponse {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 action = 3;

    required int32 bankroll = 4;

    optional int32 bet = 5;
}

message Pot{

    repeated int32 winnerId = 1;

    required int64 gold = 2;

    repeated int32 playerIds = 3;

    required int32 potType = 4;

    required int32 potId = 5;
}

message NoInsuranceNotify {

    optional NoInsuranceTips turnTips = 1;

    optional NoInsuranceTips riverTips = 2;

    required int32 outsLimit = 3;
}

message WaitBuyInsuranceNotify {

    required int32 buyPlayerId = 1;

    required string buyPlayerName = 2;
}

message ItemTemplateNotify {
    repeated ItemTemplate itemTemplates = 1;
}

message PlayerItemNotify {
    repeated PlayerItem playerItems = 1;
}

message UseItemRequest {

    required string itemId = 1;

    optional int32 count = 2;

    optional string name = 3;

    optional string phone = 4;

    optional string wechat = 5;

    optional string address = 6;
}

message UseItemResponse {

    required bool suc = 1;

    required string itemId = 2;
}

message AddPlayerItemNotify {
    repeated PlayerItem addItems = 1;
}

message DeletePlayerItemNotify {
    repeated PlayerItemCount itemCount = 1;
}

message PlayerItemCount {

    required string itemId = 1;

    required int64 count = 2;
}

message ItemTemplate {

    required int32 itemTempId = 1;

    required string name = 2;

    required int32 type = 3;

    required string icon = 4;

    required string desc = 5;

    optional string effectDescs = 6;

    required int32 canGift = 7;

    required string smallIcon = 8;

    required string engName = 9;

    required string engDesc = 10;

    required int32 canConvert = 11;

    required string convert = 12;
}

message PlayerItem {

    required string itemId = 1;

    required int32 itemTempId = 2;

    required int32 playerId = 3;

    required int64 count = 4;

    required int32 expireTime = 5;
}

message TakeMascotRequest {

    required int32 itemTempId = 1;
}

message TakeMascotResponse {

    required int32 curMascotItemTempId = 1;
}

message HandselItemPlayerInfoRequest {

    required int32 targetPlayerId = 1;
}

message HandselItemPlayerInfoResponse {

    required int32 targetPlayerId = 1;

    required string playerName = 2;

    required string playerIcon = 3;
}

message HandselItemRequest {

    required string itemId = 1;

    required int32 count = 2;

    required int32 targetPlayerId = 3;
}

message HandselItemResponse {

    required string itemId = 1;

    required int32 count = 2;

    required int32 targetPlayerId = 3;
}

message GetCdKeyRequest {
    required string cdKey = 1;
}

message GetCdKeyResponse {
    required int32 templateId = 1;
    required int64 templateCount = 2;
    required string cdKey = 3;
}

message UseCdKeyRequest {
    required string cdKey = 1;
}

message UseCdKeyResponse {
    required string cdKey = 1;
}

message ConvertItemRequest {

    required string itemId = 1;
}

message ConvertItemResponse {

    required bool suc = 1;

    required string itemId = 2;
}

message UseQRCodeTicketResponse {

    required bool suc = 1;

    required int32 itemTemplateId = 2;

    required string url = 3;
}

message RedPacketResponse {
    required int32 templateId = 1;
    required int64 count = 2;
    required int32 playerId = 3;
}

message RedPacketWithMoneyResponse {
    required int32 templateId = 1;
    required int64 count = 2;
    required int32 playerId = 3;
}

message NotifyPlayerBonus {
    required int32 playerId = 1;
    required string playerName = 2;
    required string icon = 3;
    required int32 handPowerType = 4;
    required int32 bonus = 5;
}
message JackpotInfoRequest {
    required int32 roomId = 1;
}

message JackpotInfoResponse {
    required int64 jackpot = 1; 
    required int64 sb = 2;
    required int64 bb = 3;
    required bool straddle = 4;
    required int32 lowestDivideBb = 5;
    required int32 divideBb = 6;
    repeated TriggerCard triggerCards = 7;
    required bool enable = 8; 
    optional string gameType = 100;
}

message TriggerCard {
    required int32 handPowerType = 1;
    required double rate = 2;
}

message JackpotRecordsRequest {
}

message JackpotRecordsResponse {
    optional JackpotUserRecord max = 1; 
    repeated JackpotUserRecord players = 2; 
}

message JackpotUserRecord {
    required string playerName = 1;
    required int32 handPowerType = 2; 
    required int64 jackpot = 3; 
    required int64 bonusTime = 4;
}

enum MallShowType {
    Normal = 1;
    Hot = 2;
    Discount = 3;
}

message Product {
    required uint32 id = 1;
    required string name = 2;
    required string desc = 3;
    required int64 costCount = 4;
    required uint32 type = 5;
    required MallShowType showType = 6;

    required int32 itemTempId = 7;
    required int64 count = 8;
    required string engName = 9;
    required string engDesc = 10;
    required int32 costItemId = 11;

    required int32 originalCost = 12;
}

enum PaymentType {
    diamonds60 = 1;
    diamonds300 = 2;
    diamonds1280 = 3;
    diamonds2580 = 4;
    diamonds5180 = 5;
    diamonds12980 = 6;
}

enum PayType {
    IAP = 1;
    Wechat = 2;
    Fast = 3;
}

message Payment {
    required uint32 id = 1;
    required int64 diamond = 2;
    required int64 cost = 3;
    required string type = 4;
    required MallShowType showType = 5;
    required string goodsName = 6;
    required string engGoodsName = 7;
}

message WechatOrder {
    required string prePayId = 1;
    required string partnerId = 2;
    required string package = 3;
    required string nonceStr = 4;
    required string timeStamp = 5;
    required string sign = 6;
}

message IapOrder {
    required string productId = 1;
    required string callbackUrl = 2;
    required int64 amount = 3;
}

message Order {
    required string orderId = 1;
    required uint32 paymentId = 2;
    required uint32 time = 3;
    oneof extra {
        IapOrder iapOrder = 11;
        WechatOrder wechatOrder = 12;
    }
}

message MallProductsRequest {
}

message MallProductsResponse {
    repeated Product products = 1;
}

message MallPaymentsRequest {
}

message MallPaymentsResponse {
    repeated Payment payments = 1;
    required string payType = 2;
}

message MallOrderRequest {
    required string type = 1;
    required uint32 paymentId = 2;
}

message MallOrderResponse {
    required Order order = 1;
}

message MallBuyRequest {
    required uint32 productId = 1;
}

message MallBuyResponse {
    required int32 productId = 1;

    required string itemId = 2;

    optional int32 mascotItemTempId = 3;
}

message MallPaymentNotify {
    required bool isSuccess = 1;
    optional uint32 paymentId = 2;
    optional int64 diamond = 3;
    optional int64 gold = 4;
    optional int64 masterscore = 5;
}

enum TransactionType {
    GRANT = 1; 
    CONTRIBUTION = 2; 

    RECHARGE = 5;
    INSURANCE_REBATE = 6;
    SETTLEMENT_REBATE = 7;
    REBATE = 8;
    WITHDRAW_CREDIT_SCORE = 9; 
    ADD_CREDIT_SCORE = 10; 
    HELP_REPAY = 11;
    SYSTEM_REDUCE = 12;
    SETTLEMENT_SUBCLUB_REBATE = 13;
    JACKPOT_REBATE=14;
    JACKPOT_REDUCE=15;
    JACKPOT_SETTLEMENT_REDUCE=16;
    JP_GM_ADD=17;
    JP_GM_REDUCE=18;
    SYSTEM_INCOME_MALL = 19; 
    GRANTED = 20;
    CONTRIBUTIONED = 21;
    HANDSREWARD = 22;
    RANKREWARD = 23;
    ITEMREVERT = 24;
    SYSTEM_RACE_REWARD = 25;
    REDPACKET_REWARD = 26;
    RACESERVICEBACK = 27;
    GRANT_TO_LOWER_CLUB = 28; 
    CLUB_CONTRIBUTE_TO_UPPER_CLUB = 29; 
    UPPER_CLUB_GRANTED = 30;
    LOWER_CLUB_CONTRIBUTED = 31;
    HONOR_CLUB_COST = 32;
    HONOR_CLUB_ADD = 33;
}

message MasterScoreRecord {
    required uint64 id = 1;
    required sint32 clubId = 2; 
    required uint64 expend = 3; 
    required uint64 income = 4; 
    required TransactionType transactionType = 5; 
    required int64 masterScore = 6; 
    required uint64 transactionTime = 7; 
    optional string expendName = 8;
    optional string incomeName = 9;
    optional int64 curMasterScore = 10;
    optional string icon = 11;
}

message MasterScoreStatistics {
    required uint64 id = 1;
    required sint32 clubId = 2; 
    required sint32 playerId = 3; 
    required sint32 totalScore = 4; 
}

message ContributionMasterScoreRequest {
    required sint32 clubId = 1;
    required int64 masterScore = 3;
}

message ContributionMasterScoreResponse {
    required int64  masterScore = 1;
}

message GrantMasterScoreRequest {
    required sint32 clubId = 1;
    required sint32 playerId = 2;
    required int64 masterScore = 3;
}

message GrantMasterScoreResponse {
    required int64  masterScore = 1;
}

message MasterScoreRecordsRequest {
    required sint32 clubId = 1;
    required sint32 page = 2;
    required sint32 pageSize = 3;
}

message MasterScoreRecordsResponse {
    required sint32 page = 1;
    repeated MasterScoreRecord masterScoreRecords = 2;
}

message MasterScoreStatisticsRequest {
    required sint32 clubId = 1;
    required sint32 page = 2;
    required sint32 pageSize = 3;
}

message MasterScoreStatisticsResponse {
    required sint32 page = 1;
    repeated MasterScoreStatistics masterScoreStatistics = 2;
}

message MasterScoreGainsRequest{
    required sint32 clubId = 1;
}

message MasterScoreGainsResponse {
   repeated MasterScoreGainsData masterScoreGainsData =1;
}

message MasterScoreGainsData{
    required uint64 dataTime = 1;
    required int32 clubRebate = 2;
    required int32 clubInsureRebate = 3;

    required int32 subClubRebate = 4;
}

enum MTTPurchaseType {
    ReEntry = 1;
    ReBuy = 2;
    Addon = 3;
}

message JoinMTTRoomRequest {

    required int32 roomId = 1;

    required string invitationCode = 2;

    required string sessionKey = 3;

    required int32 gameId = 4;
}

message JoinMTTRoomResponse{

    required int32 roomId = 1;

    required string invitationCode = 2;

    required int64 bb = 3;

    required int64 pot = 4;

    repeated SitInfo sitInfo = 5;

    required int32 roomType = 6;

    required int32 createrId = 7;

    required string name = 8;

    required int64 ante = 9;

    required sint32 upbinld = 10;

    required int32 actionTime = 11;

    required int32 gameId = 12;

    repeated Pot pots = 13;

    optional PubCard pubCard = 14;

    required string signUpCost = 15;

    required int32 signUpFeePercent = 16;

    required int64 baseBankroll = 17;

    required int32 reBuyRestNum = 18;

    required int32 addRestNum = 19;

    required int32 rEndBlind = 20;

    required int32 addonChips = 21;

    required int32 curBlindRank = 22;

    repeated Card mycard = 23;

    optional HandPowerEnum handPowerEnum = 24;

    required int32 joinPlayerId = 25;

    required int32 curBlindRestTime = 26;

    optional int32 endSignupBlind = 27;

    optional string rebuyCost = 28;

    optional int32 rebuySurchargePercent = 29;

    required int32 signUpType = 30;

    required int64 sb = 31;

    required int32 playType = 32;

    required int32 raiseLimitFixed = 33;

    required string raiseLimitPot = 34;
    repeated PublicCardCostItem item = 35;
}

message PublicCardCostItem {
    required int32 itemId = 1;
    required int32 count = 2;
    required string state = 3;
}

message HandPowerEnum1 {

    enum HandPowerTypes1 {

        HIGH_CARD = 1;

        ONE_PAIR = 2;

        TWO_PAIR = 3;

        THREE_OF_A_KIND = 4;

        STRAIGHT = 5;

        FLUSH = 6;

        FULL_HOUSE = 7;

        FOUR_OF_A_KIND = 8;

        STRAIGHT_FLUSH = 9;

        ROYAL_STRAIGHT_FLUSH = 10;

        NO_CARD = 11;
    }

    optional HandPowerTypes handPowerTypes = 1 [default = HIGH_CARD];
}

message RaceBlindTable {

    required int32 blindRank = 1;

    required int32 smallBlind = 2;

    required int64 ante = 3;
}

message PlayerInfo {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 state = 3;

    required int32 gameGold = 4;

    required string icon = 5;

    required string playerName = 6;
}

message SitInfo1 {

    required int32 sitId = 1;

    required int32 playerId = 2;

    required int32 action = 3;

    required int64 actionTime = 4;

    required int64 bet = 5;

    required bool isDealer = 6;

    required bool isSB = 7;

    required bool isBB = 8;

    required int64 bankroll = 9;

    required int64 needCall = 10;

    required int32 state = 11;

    required int64 ante = 12;

    required string icon = 13;

    required string playerName = 14;

    required int32 roomId = 15;

    required int32 gameId = 16;

    required bool managed = 17;

    optional bool isStraddle = 18;

    optional bool  isforce = 19;

    required int32 takeMascot = 20;

    optional int32 sngOverRank = 21;

    optional int32 suspicionTag = 22;

    optional int32 aGroupOfTag  = 23;

    required int32 endaction = 24;

    optional int32 keepSitRestTime = 25;
}

message Pot1 {

    repeated int32 winnerId = 1;

    required int64 gold = 2;

    repeated int32 playerIds = 3;

    required int32 potType = 4;

    required int32 potId = 5;
}

message PubCard2 {

    repeated Card card = 1;

}

message Card1 {

    required string cardSuit = 1;

    required int32 cardNumber = 2;
}

message MTTConnectRequest {

    required string incode = 1;
}

message MTTGameUpdate {

    required int32 roomId = 1;

    required string invitationCode = 2;

    required int64 bb = 3;

    required int64 pot = 4;

    repeated SitInfo sitInfo = 5;

    required int32 roomType = 6;

    required int32 createrId = 7;

    required string name = 8;

    required int64 ante = 9;

    required sint32 upbinld = 10;

    required int32 actionTime = 11;

    required int32 gameId = 12;

    repeated Pot pots = 13;

    optional PubCard pubCard = 14;

    required int64 sb = 15;
}

message MTTReEntryNotify {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int32 playerId = 4;

    required int32 countDown = 5;
}

message MTTPurchaseRequest {
    required MTTPurchaseType type = 1;

    required int32 roomId = 2;

    required string rebuyItemUniqueId = 3;
}

message MTTPurchaseResponse {

    required bool suc = 1;

    optional int32 reBuyRestNum = 2;

    optional int32 addRestNum = 3;
    required MTTPurchaseType type = 4;

    optional int32 playerId = 5;
}

message MTTUnReEntryRequest {

    required int32 roomId = 1;
}

message MTTUnReEntryResponse {

    required bool suc = 1;
}

message MTTPlayerOverRankNotify {

    required int32 sitId = 1;

    required int32 rank = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    required string reward = 5;

    required int32 playerId = 6;
}

message MTTOutRoomRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;
}

message mttDetailRequest {

    required int32 roomId = 1;
}

message mttDetailResponse {

    required int32 roomId = 1;

    required int64 avgBankRoll = 2;

    required int64 maxBankRoll = 3;

    required int64 minBankRoll = 4;

    required int32 curGameNum = 5;

    required int32 preceedTime = 6;

    required int32 restPlayerNum = 7;

    required int32 totalPlayerNum = 8;

    required int64 totalBonus = 9;

    required int32 rewardNum = 10;

    required int32 blindRestTime = 11;

    repeated MTTBonusInfo bonusInfo = 12;

    required int32 totalBuyCount = 13;

    required int32 floatRewardItemId = 14;

    required int32 awardType = 15;
}

message MTTBonusInfo {

    required int32 rankStart = 1;

    required int32 rankEnd = 2;

    required int32 percent = 3;

    optional string itemsReward = 4;
}

message mttRankRequest {

    required int32 roomId = 1;

    required int32 rankStart = 2;

    required int32 rankEnd = 3;
}

message mttRankResponse {

    required int32 roomId = 1;

    repeated mttRankPlayer rankPlayer = 2;

    required bool isInRank = 3;
}

message mttRankPlayer {

    required int32 rank = 1;

    required int32 playerId = 2;

    required string playerIcon = 3;

    required string playerName = 4;

    required int32 curGameId = 5;

    required int64 bankRoll = 6;
}

message mttDataRequest {

    required int32 roomId = 1;
}

message mttDataResponse {

    required string signUpCost = 1;

    required int32 signUpFee = 2;

    required int64 baseBankroll = 3;

    required int32 reBuyRestNum = 4;

    required int32 addRestNum = 5;

    required int32 rEndBlind = 6;

    required int32 addonChips = 7;

    required int32 curBlindRank = 8;

    repeated RaceBlindTable raceBlind = 9;

    required int32 signUpType = 10;
}

message MTTWatchRequest {

    required int32 roomId = 1;

    optional int32 gameId = 2;

    optional int32 watchPlayerId = 3;

    required string sessionKey = 4;
}

message MTTOverNotify {

    required int32 roomId = 1;

    required string roomName = 2;

    required int32 createrId = 3;

    required string createrName = 4;

    required string createrIcon = 5;

    required string createTime = 6;

    required int32 roomType = 7;

    required int32 maxPlayerCount = 8;

    required int32 durationTime = 9;

    required string startTime = 10;

    required int32 upBlindTime = 11;

    required string applyCost = 12;

    required int64 initChip = 13;

    optional int64 totalBonus = 14;

    repeated MTTPlayerReward playerReward = 15;

    required int32 gameId = 16;

    required int32 playerCount = 17;

    required int32 totalReBuyCount = 18;

    required int32 signUpType = 19;

    optional int32 floatRewardItemId = 20;

    required int32 straddle = 21;
}

message MTTPlayerReward {

    required int32 rank =1;

    required int32 playerId = 2;

    required string playerName = 3;

    optional int64 rewardGold = 4;

    required string playerIcon = 5;

    optional string rewardItems = 6;

    required int32 buyCount = 7;
}

message MTTMyRankRequest {

    required int32 roomId = 1;
}

message MTTMyRankResponse {

    required int32 roomId = 1;

    required int32 playerId = 2;

    required int32 rank = 3;
}

message WaitingHandNotify {

    required int32 roomId = 1;

    required int32 playerId = 2;

    required int32 waitCount = 3;
}

message MttFinalTableNotify{
    required int32 roomId = 1;
    required int32 gameId = 2;
}

enum NotifyType {
    NotifyNotice = 1;
    NotifySystem = 2;
    NotifyClub = 3;
    NotifyAuthority = 4;
}

enum NotifyOption {
    ApplJoinClub = 1;
    QueryRecord = 2;
    QueryReward = 3;
    IntoMatchList = 4;
    BindPhone = 5;
    ClubIdCredit = 6;
    ClubMaserThreshold=7;
    AuthorityPlayerRebuy = 8;
}

message OptionParams {
    optional NotifyOption option = 1;
    optional string clubName = 2;
    optional int32 clubId = 3;
    optional int64 applyId = 4;

    optional int32 recordId = 5;

    optional string raceName = 6;

    optional int32 raceRank = 7;

    optional int32 rewardType = 8;

    repeated RaceReward raceReward = 9;
}

message RaceReward {

    optional string rewardName = 1;

    optional int64 rewardNum = 2;
}

message NotifyParameter {
    oneof Param {
        string banner = 1;
    }
}

message Notification {
    required uint64 notifyId = 1;
    required NotifyType type = 2;
    required int32 title = 3;
    required string icon = 4;
    required int32 desciption = 5;
    required fixed32 time = 6;
    required bool isPush = 7;
    repeated NotifyParameter params = 8;

    optional OptionParams optionPrams = 9;

    repeated TitleParam titleParams = 10;

    repeated DescParam descParams = 11;
}

message TitleParam {
    required string titleParams = 1;
}

message DescParam {
    required string descParams = 1;
}

message NotifyRequest {
    required uint64 id = 1;
}

message NotifyResponse {
    required uint64 id = 1;
    required string content = 2;
}

message NotifyListRequest {
    required NotifyType notifyType = 1;
}

message NotifyListResponse {
    required NotifyType notifyType = 1;
    repeated Notification notifications = 2;
}

message NotifyNewCommonRoom{
    required int32 roomId = 1;
    required string roomName = 2;
    required int32 gammeId = 3;
}

message authorityPlayerRebuyReq{
    required string notifyId = 1;
    required int32 agree = 2;
}

message authorityPlayerRebuyRes{
    required int32 status = 1;
}

enum TokenType {
    TokenChat = 1;
}

enum ServerType {
    Chat = 1;
}

message PlayerServer {
    required ServerType type = 1;
    required string ip = 2;
    required uint32 port = 3;
}

message PlayerData {
    required uint32 handCount = 1;
    required uint32 inPotCount = 2;
    required uint32 raceCount = 3;
    required uint32 rewardCount = 4;
}

message Player {
    required uint32 playerId = 1;
    required int64 gold = 6;
    required string playerName = 8;
    required bool hasPhone = 9;
    repeated PlayerServer servers = 12;
    required int64 diamond = 13;
    optional Reconnect reconnect = 10;
    optional string accountId = 11;
    optional string token = 7;
    optional string icon = 2;
    optional uint32 gender = 3;
    optional string name = 4;
    optional string signature = 5;
    optional PlayerData playerData = 14;
    optional string settings = 15; 
    optional bool isWeixin = 16;
    optional bool isUpload = 17;
    optional string club = 18;

    required int32 takeMascot = 19;
    optional string clubLevel = 20; 
    optional string addBetType = 21;
    optional string tableStyle = 22;
    optional int32 cardStyle = 23;
    optional int32 paySettingIndex = 24; 
    optional int32 notCheckPasswordDays = 25; 
    optional int32 notCheckPasswordAmount = 26; 
    optional bool setPaySetting = 27; 
    optional string secondPasswordPhone = 28; 
    optional string secondPasswordNationCode = 29; 
    optional bool deviceLock = 30; 
    required string account = 31; 
    optional int32 cardbackStyle = 32;
    optional int32 tablebackStyle = 33;
    required bool hasWalletPwd = 34;
}

message ModifyPlayerInfoCost {

    required int32 costItemId = 1;

    required int64 costCount = 2;
}

message PlayerUpdateStyleRequest {
    optional string addBetType = 1;
    optional string tableStyle = 2;
    optional string cardStyle = 3;
    optional string cardbackStyle = 4;
    optional string tablebackStyle = 5;
}

message PlayerUpdateStyleResponse {
    optional string addBetType = 1;
    optional string tableStyle = 2;
    optional string cardStyle = 3;
    optional string cardbackStyle = 4;
    optional string tablebackStyle = 5;
}

message Reconnect {

    required string roomServerIp = 1;

    required int32 port = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    required string incode = 5;

    required int32 playerId = 6;

    required int32 roomType = 7;

    optional int32 raceId = 8;
}

message PlayerToken {
    required TokenType tokenType = 1;
    required string token = 2;
    optional uint32 expiryTime = 3;
}

message PlayerTokenRequest {
    required TokenType tokenType = 1;
    required int32 playerId = 2;
}

message PlayerTokenResponse {
    required PlayerToken token = 1;
    optional string ip = 2;
    optional uint32 port = 3;
}

message PlayerSignUpRequest {
    required string phoneNumber = 1;
    required string password = 2;
    required string captcha = 3;
    optional string version = 4;

    required string nationCode = 5;
}

message PlayerSignUpResponse {
}

message PlayerBindPhoneRequest {
    required string phoneNumber = 1;
    required string password = 2;
    required string captcha = 3;

    required string nationCode = 5;
}

message PlayerBindPhoneResponse {
    required bool isok=1;
}

message PlayerUnbindPhoneRequest {
    required string phoneNumber = 1;
    required string captcha = 2;
}

message PlayerUnbindPhoneResponse {
    required bool isok=1;
}

message PlayerChangePasswordRequest {
    required string phoneNumber = 1;
    required string password = 2;
    required string captcha = 3;

    required string nationCode = 4;
}

message PlayerChangePasswordResponse {
    required Player player = 1;
}

message PlayerLoginRequest {
    required string accountId = 1;
    optional string password = 2;
    optional string token = 3;
    optional string version = 4;

    required string nationCode = 5;
    optional string uuid = 6; 
    optional string clientIp = 7; 
}

message PlayerLoginResponse {
    required string sessionKey = 1;
}

message PlayerConnectRequest {
    required string sessionKey = 1;
    required string deviceId = 2; 

    required string deviceType = 3;
}

message PlayerConnectResponse {
    required Player player = 1;

    optional string videoServerIp = 2;

    optional bool bandWechat = 3;
}

message PlayerWechatLoginRequest {
    required string code = 1;
    optional string version = 2;
}

message PlayerWechatLoginResponse {
    required Player player = 1;
}

message PlayerEditRequest {
    optional string icon = 1;
    optional uint32 gender = 2;
    optional string name = 3;
    optional string signature = 4;
    optional bool isUpload = 5;
}

message PlayerEditResponse {
    required Player player = 1;

    repeated ModifyPlayerInfoCost modifyCost = 2;

    repeated ModifyPlayerInfoCost nextModifyCost = 3;
}

message PlayerInfoRequest {
    optional uint32 playerId = 1;
}

message PlayerInfoResponse {
    required Player player = 1;

    repeated ModifyPlayerInfoCost modifyCost = 2;

    repeated ModifyPlayerInfoCost nextModifyCost = 3;
}

message PlayerCaptchaRequest {
    required string phoneNumber = 1;
    optional int32 type = 2; 
    optional string version = 3;
}

message PlayerCaptchaResponse {
    optional uint32 banTime = 1;
    optional int32 type = 2; 
}

message PlayerDailyGold {
    required int64 gold = 1;
}

message PlayerGoldUpdate {
    required int32 gold = 1;
}

message PlayerDiamondUpdate {
    required uint32 diamond = 1;
}

message PlayerLogoutRequest {
}

message PlayerLogoutResponse {
}

message getPlayerInfoRequest {
    required uint32 playerId = 1;
}

message getPlayerInfoResponse {
    required Player player = 1;
}

message EveryDayRewardItemTemplate {

    required int32 itemTempId = 1;

    required int64 itemTempCount = 2;

    optional int32 day = 3;

}

message EveryDayRewardNotify {
    repeated EveryDayRewardItemTemplate templates = 1;
    optional int32 totalDay = 2; 
    optional int32 curDay = 3; 
}

message PlayerMasterScoresLog {
    required int32 action = 1; 
    required int64 actionCount = 2; 
    required int64 actionTime = 3; 
    required int32 actionType = 4; 
    required string clubId = 5; 
    required string clubName = 6; 
    required int64 curCount = 7; 
    required int64 id = 8;
    required int32 itemTempId = 9; 
    required int32 playerId = 10; 
    required string playerName = 11; 
    required int32 propsId = 12; 
    required string targetPlayerId = 13;
    required string targetPlayerName = 14;
}

message GetPlayerMasterScoresLogRequest {
    required int32 pageNow = 1;
}

message GetPlayerMasterScoresLogResponse {
    repeated PlayerMasterScoresLog logs = 1; 
    required int32 pageNow = 2; 
    required int32 totalPage = 3; 
    required bool hasPre = 4; 
    required bool hasNext = 5; 
    required int32 totalCount = 6; 
}

enum p2State {
    empty = 1; 
    notequal = 2; 
    equal = 3; 
    needInput = 4; 
    error = 5; 
    ok = 6; 
}

message SetPlayerSecondPasswordRequest {
    required string phone = 1; 
    required string pwd = 2; 
    required string captcha = 3; 
    required string secondPasswordNationCode = 4; 
}
message SetPlayerSecondPasswordResponse {
}

message SetPlayerPaySettingsRequest {
    required int32 index = 1; 
    optional int32 days = 2; 
    optional int32 amount = 3; 
}
message SetPlayerPaySettingsResponse {
    required int32 index = 1; 
    optional int32 days = 2; 
    optional int32 amount = 3; 
}

message NeedInputCodeResponse {
    required p2State state = 1;
    required string methodName = 2; 
    required int32 type=3;
}

message CheckSecondPasswordPageRequest {
    required string methodName = 1; 
}
message CheckSecondPasswordResponse {
    required p2State state = 1; 
    required string methodName = 2; 
}

message VerifySecondPasswordRequest {
    required string methodName = 1; 
    required string pwd = 2; 
    optional int32 roomId = 3; 
}

message GetPlayerSecondPasswordCaptchaRequest {
    required string phoneNumber = 1;
    optional int32 type = 2; 
    optional string version = 3;
}
message GetPlayerSecondPasswordCaptchaResponse {
    optional uint32 banTime = 1;
    optional int32 type = 2; 
}

message BandWechatRequest {

    required string openId = 1;
}

message BandWechatResponse {

    required bool bandWechat = 1;
}

message VerifyDeviceLockSmsRequest {
    required string methodName = 1; 
    required string sms = 2; 
    required string deviceCode = 3; 
}

message SetDeviceLockRequest {
    required bool lockSwitch = 1; 
    required string deviceCode = 2; 
}
message SetDeviceLockResponse {
    required bool lockSwitch = 1; 
}

message NotifyNextRoundStartRoomResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    repeated SitInfo sitInfo = 3;

    required int64 pot = 4;

	required int32 roomType = 5;

	required int64 bb = 6;

	required int64 ante = 7;

	optional sint32 upBlindTime = 8;

	optional sint32 endTime = 9;

    required int64 sb = 10;
}

message SitInfo3 {

    required int32 sitId = 1;

    required int32 playerId = 2;

    required int32 action = 3;

    required int64 actionTime = 4;

    required int64 bet = 5;

    required bool isDealer = 6;

    required bool isSB = 7;

    required bool isBB = 8;

    required int64 bankroll = 9;

    required int64 needCall = 10;

	required int32 state = 11;

	required int64 ante = 12;

    required string icon = 13;

    required string playerName = 14;

	required int32 roomId = 15;

	required int32 gameId = 16;

	required bool managed = 17;

    optional bool isStraddle = 18;

    optional bool  isforce = 19;

    required int32 takeMascot = 20;

    optional int32 sngOverRank = 21;

    optional int32 suspicionTag = 22;

    optional int32 aGroupOfTag  = 23;

    required int32 endaction = 24;

    optional int32 keepSitRestTime = 25;
}

message StartCommonGameRoomResponse{

    required int32 roomId = 1;

    required int32 gameId = 2;

    repeated SitInfo sitInfo = 3;

    required int32 roomType = 4;

    required int64 pot = 5;

    required int64 ante = 6;

	required int64 bb = 7;

	optional sint32 upBlindTime = 8;

	optional sint32 endTime = 9;

    required int64 sb = 10;
}

message LoginRequest {

    required string playerPassword = 1;

    required string playerName = 2;
}

message LoginResponse {

    required int32 id = 1;

    required int64 gold = 2;

    required string icon = 3;

    required string playerPassword = 4;

    required string playerName = 5;

    optional RoomInfos roomInfos = 6;
}

message RoomInfos {

    repeated RoomInfo roomInfo = 1;
}

message RoomInfo {

    required int32 serverId = 1;

    required int32 roomId = 2;

    required string invitationCode = 3;

    required string roomName = 4;

    required int64 bb = 5;

    required int32 playerCountLimit = 6;

    required int32 inGamePlayerCount = 7;
}

message CreatePokerRoomRequest {

    required int32 roomType = 1;

    required string roomName = 2;

    required int64 bb = 3;

    required int64 bankroll = 4;

    required int32 joinPlayerCount = 5;

    required int32 time = 6;

    required int64 ante = 7;

    required sint32 thinkTime = 8;

    required int32 clubId = 9;

    required int32 applyItemTemplateId = 10;

    optional int32 insurance = 11;

    optional int32 straddle = 12;

    optional int32 minOnTableTime = 13;

    required int32 playType = 14;
}

message CreateSNGPokerRoomRequest{

    required int64 applyCost = 1;

    required int64 surcharge = 2;

    required int64 bankroll = 3;

    required sint32 upBlindTime = 4;

    required string roomName = 5;

    required int32 clubId = 6;

    required int32 joinPlayerCount = 7;

    required int32 applyItemTemplateId = 8;

    required int32 playType = 9;
}

message NotifySngStartBegin{

    required int32 countdown = 1;

    required int32 roomId = 2;

    required int32 gameId = 3;

}

message CreatePokerRoomResponse {

    required int32 roomId = 1;

    required string ip = 2;

    required int32 port = 3;

    required int32 gameId =4;

    required int32 roomType = 5;

    required sint32 clubId = 6;

    required int32 actionTime = 7;

    required int32 playType = 8;
}

message ConnectRoomServerRequest {

    required string invitationCode = 1;

    optional int32 roomId = 2;
}

message ConnectRoomServerResponse {

    required int32 roomId = 1;

    required string ip = 2;

    required int32 port = 3;

    required string invitationCode = 4;

    required int32 gameId = 5;

    required int32 roomType = 6;

    required int32 playType = 7;
}

message HeartbeatRequest {

}

message HeartbeatResponse {

    required bool heart = 1;

    required int64 timestamp = 2;
}

message NotifyDestroyRoom {
    required int32 roomId = 1;
}

message JoinRoomRequest {

    required int32 roomId = 1;

    required string invitationCode = 2;

    required string sessionKey = 3;

    required int32 gameId = 4;

    required int32 joinGameClubId = 5;
}

message JoinRoomResponse {

    required int32 roomId = 1;

    required string invitationCode = 2;

    required int64 bb = 3;

    required int64 pot = 4;

    repeated SitInfo sitInfo = 5;

    required int32 roomType = 6;

    required int32 createrId = 7;

    required string name = 8;

    required int64 ante = 9;

    required sint32 endTime = 10;

    required int32 actionTime = 11;

    optional PubCard pubCard = 12;

    required int32 gameId = 13;

    required int32 bankrollType = 14;

    required int32 addThinkTime = 15;

    required int32 addThinkTimeCostItemId = 16;

    required int32 addThinkTimeCostCount = 17;

    required int32 insuranceTarget = 18;

    required int32 straddleTarget = 19;

    required int32 gpsIpTarget = 20;

    required int64 sb = 21;

    required int32 joinGameClubId = 22;

    required bool play = 23;

    optional string clubName=24;

    optional int32 clubTableNO=25;

    required int32 playType = 26;

    required int32 raiseLimitFixed = 27;

    required string raiseLimitPot = 28;

    optional Pots pots = 29;

    optional int32 clubRoom = 30;
    optional string clubInviteCode =31;
    optional bool canStart = 32;
    optional bool canOver = 33;
    repeated PublicCardCostItem item = 34;
    required int32 canBringOut = 35;
    required float minKeepMultiple = 36;
    required float bringOutMultiple = 37;
}

message JoinSNGRoomRequest{

    required int32 roomId = 1;

    required string invitationCode = 2;

    required string sessionKey = 3;

    required int32 gameId = 4;
}

message JoinSNGRoomResponse{

    required int32 roomId = 1;

    required string invitationCode = 2;

    required int64 bb = 3;

    required int64 pot = 4;

    repeated SitInfo sitInfo = 5;

    required int32 roomType = 6;

    required int32 createrId = 7;

    required string name = 8;

    required int64 ante = 9;

    required sint32 upbinld = 10;

    required int32 actionTime = 11;

    required int32 gameId = 12;

    required int64 sb = 13;

    required int32 curBlindRestTime = 14;

    optional PubCard pubCard = 15;

    required bool isStart = 16;

    required int32 playType = 17;

    required int32 raiseLimitFixed = 18;

    required string raiseLimitPot = 19;

    optional Pots pots = 20;
    repeated PublicCardCostItem item = 21;
}

message SitDownRequest {

    required int32 roomId = 1;

    required int32 sitId = 2;

    required int32 gameId = 3;

    optional int32 clubId = 4;

    required string gps = 5;

    optional string clientIp = 6;
}

message SitDownResponse {

    required int32 roomId = 1;

    required SitInfo sitInfo = 2;

    required int32 gameId = 3;
}

message Cards{

    repeated Card card = 1;
}

message StandUpRequest {

    required int32 roomId = 1;

    required int32 sitId = 2;

    required int32 gameId = 3;
}

message AdvanceLeaveTableRequest {

    required int32 roomId = 1;

    required int32 sitId = 2;

    required int32 gameId = 3;
}

message AdvanceLeaveTableResponse {

    required int32 roomId = 1;

    required int32 sitId = 2;

    required int32 gameId = 3;

    required int32 playerId = 4;
}

message StandUpResponse {

    required int32 roomId = 1;

    required int32 sitId = 2;

    required int32 playerId = 3;

    required bool allow = 4;

    required bool advleavn = 5;
}

message OutRoomRequest {

    required int32 roomId = 1;

    optional int32 gameId = 2;

    optional sint32 sitId = 3;
}

message OutRoomResponse {

    required int32 playerId = 1;

    required string playerName = 2;

    required string roomName = 3;

    required bool allow = 4;

    required int32 roomId = 5;
}

message OutSngRoomRequest{
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
}

message OutSngRoomResponse{

    required bool trusteeship = 1;

    optional int32 sitId = 2;

    required int32 roomId = 3;
    optional int32 gameId = 4;
}

message SngOverRankResponse{

    required int32 sitId = 1;

    required int32 rank = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    required string reward = 5;
}

message StartCommonGameRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

}

message NotifyUpBlindResponse{

    required int64 bb = 1;

    required int64 ante = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    required int32 blindRank = 5;

    required int64 sb = 6;
}

message StartCommonGameResponse {

    repeated Card card = 1;

    required int32 playerId = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    repeated SitInfo sitInfo = 5;

    required int64 pot = 6;

    required int32 sitId = 7;

    required int64 highChip = 8;

    required HandPowerEnum handPowerEnum = 9;

    required int64 ante = 10;

    required int32 endTime = 11;

    required int64 baseRaise = 12;
}

message StartSNGGameResponse {

    repeated Card card = 1;

    required int32 playerId = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    repeated SitInfo sitInfo = 5;

    required int32 pot = 6;

    required int32 sitId = 7;

    required int32 highChip = 8;

    required HandPowerEnum handPowerEnum = 9;

    required int64 ante = 10;

    required int32 upBlindTime = 11;

    required int64 baseRaise = 12;

}

message Card {

    required string cardSuit = 1;

    required int32 cardNumber = 2;

    optional int32 tag = 3;

    optional int32 ctype = 4;
}

message SitInfo {

    required int32 sitId = 1;

    required int32 playerId = 2;

    required int32 action = 3;

    required int64 actionTime = 4;

    required int64 bet = 5;

    required bool isDealer = 6;

    required bool isSB = 7;

    required bool isBB = 8;

    required int64 bankroll = 9;

    required int64 needCall = 10;

    required int32 state = 11;

    required int64 ante = 12;

    required string icon = 13;

    required string playerName = 14;

    required int32 roomId = 15;

    required int32 gameId = 16;

    required bool managed = 17;

    optional bool isStraddle = 18;

    optional bool isforce = 19;

    required int32 takeMascot = 20;

    optional int32 sngOverRank = 21;

    optional int32 suspicionTag = 22;

    optional int32 aGroupOfTag  = 23;

    required int32 endaction = 24;

    optional int32 keepSitRestTime = 25;
}

message PlayerCallRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

}

message PlayerCallResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int64 pot = 3;

    optional ActionPlayerInfo actionPlayerInfo = 4;

    required DoPlayerCallResponse doPlayerCallResponse = 5;

    required int64 highChip = 6;

    required int64 baseRaise = 7;
}

message NotifyFlopRoundResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    repeated Card card = 3;

    required int64 pot = 4;

    optional ActionPlayerInfo actionPlayerInfo = 5;

    optional DoPlayerCallResponse doPlayerCallResponse = 6;

    required int32 gameBettingState = 7;

    required int64 highChip = 8;

    optional HandPowerEnum handPowerEnum = 9;

    repeated Pot pots = 10;

    required int64 baseRaise = 11;

    repeated Card bestHoleCards = 12;
}

message DoPlayerResponse {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 action = 3;

    required int64 bankroll = 4;

    optional int64 bet = 5;
}

message ActionPlayerInfo {

    required int32 sitId = 1;

    required int32 playerId = 2;

    required int32 action = 3;

    required int64 actionTime = 4;

    required int64 needCall = 5;
}

message PlayerFoldRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;
}

message PlayerFoldResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int64 pot = 3;

    optional ActionPlayerInfo actionPlayerInfo = 4;

    required DoPlayerFoldResponse doPlayerFoldResponse = 5;

    required int64 highChip = 6;

    required int32 isfold = 7;

    required int64 baseRaise = 8;
}

message DoPlayerFoldResponse {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 action = 3;

    required int64 bankroll = 4;

    optional int64 bet = 5;
}

message PlayerCheckRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;
}

message PlayerCheckResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int64 pot = 3;

    required ActionPlayerInfo actionPlayerInfo = 4;

    required DoPlayerCheckResponse doPlayerCheckResponse = 5;

    required int64 highChip = 6;

    required int64 baseRaise = 7;
}

message DoPlayerCheckResponse {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 action = 3;

    required int64 bankroll = 4;

    optional int64 bet = 5;
}

message PlayerRaiseRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int64 betGold = 4;
}

message PlayerRaiseResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int64 pot = 3;

    required ActionPlayerInfo actionPlayerInfo = 4;

    required DoPlayerRaiseResponse doPlayerRaiseResponse = 5;

    required int64 highChip = 8;

    required int64 baseRaise = 9;
}

message DoPlayerRaiseResponse {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 action = 3;

    required int64 bankroll = 4;

    optional int64 bet = 5;
}

message PlayerAllInRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;
}

message PlayerAllInResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int64 pot = 3;

    optional ActionPlayerInfo actionPlayerInfo = 4;

    required DoPlayerAllInResponse doPlayerAllInResponse = 5;

    required int64 highChip = 8;

    required int64 baseRaise = 9;
}

message DoPlayerAllInResponse {

    required int32 playerId = 1;

    required int32 sitId = 2;

    required int32 action = 3;

    required int64 bankroll = 4;

    optional int64 bet = 5;
}

message PlayerReBuyRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 multiple = 3;

    required int32 sitId = 4;

    required int32 buyType=5;

    required int64 buyInChip = 6;

    optional int32 clubId = 7;

    optional int32 serviceTemplateId = 8;

    optional int32 serviceCount = 9;

}

message NotifyPlayerReBuyResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int64 rebuy = 4;

    required int32 playerId = 5;
}

message PlayerUnReBuyRequest {

    required int32 sitId = 1;

    required int32 roomId = 2;

    required int32 gameId = 3;
}

message NotifyGainsResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    repeated Pot pots = 3;

    repeated PlayerGainsInfo playerGainsInfo = 4;

    required bool isRiverShowDown = 7;

    optional PubCard pubCard = 8;

    optional DoPlayerCallResponse doPlayerCallResponse = 9;
}

message PlayerGainsInfo {

    optional HandCard handCard = 1;

    optional HandPower handPower = 2;

    required int32 playerId = 3;

    required int64 bankroll = 4;

    required int32 sitId = 5;

    required int64 gains = 6;

    optional HandCard bestHandCard = 7;
}

message HandPower {

    required HandPowerEnum handPowerEnum = 9;

    repeated int32 cards = 2;
}

message PubCard {

    repeated Card card = 1;

}

message HandCard {

    repeated Card card = 1;

}

message NotifyNextRoundStartResponse {

    repeated Card card = 1;

    required int32 playerId = 2;

    required int32 roomId = 3;

    required int32 gameId = 4;

    repeated SitInfo sitInfo = 5;

    required int64 pot = 6;

    required int64 highChip = 7;

    optional HandPowerEnum handPowerEnum = 8;

    required int64 baseRaise = 9;

    required int64 bb = 10;

    required int64 ante = 11;

    required sint32 upBlindTime = 12;

    required int32 endTime = 13;

    required int64 sb = 14;

    optional int32 handCount = 15;
}

message NotifyReBuyResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;

    required int64 rebuy = 4;

    required int32 sitId = 5;

    required int32 multiple = 6;

    required int32 dobuyType = 7;

    required int32 itemTemplateId = 8;

    required int64 baseBankRoll = 9;

    required int64 playerBankRoll = 10;

    optional int32 clubCreditScore = 11;

    optional int32 serviceTemplateId = 12;

    optional string servicePercentage = 13;

    optional int32 serviceCount = 14;

    optional int32 minOnTableTime = 15;

    required int32 thinkTime = 16;
}

message ScorecardRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    optional int32 clubId = 3;
}

message NotifyGameStopResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

}

message HandPowerEnum {

    enum HandPowerTypes {

        HIGH_CARD = 1;

        ONE_PAIR = 2;

        TWO_PAIR = 3;

        THREE_OF_A_KIND = 4;

        STRAIGHT = 5;

        FLUSH = 6;

        FULL_HOUSE = 7;

        FOUR_OF_A_KIND = 8;

        STRAIGHT_FLUSH = 9;

        ROYAL_STRAIGHT_FLUSH = 10;

        NO_CARD = 11;
    }

    optional HandPowerTypes handPowerTypes = 1 [default = HIGH_CARD];
}

message ActionRequest{

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int64 gold = 4;
}

message ReconnectionRequest{
    required int32 roomId = 1;
    required int32 gameId = 2;
    required string incode = 3;
    required int32 playerId = 4;
}

message ReconnectionResponse{

    optional PubCard pubCard = 1;

    repeated ReconnectionSitInfo reconnectionSitInfo = 2;

    optional HandCard handCard = 3;

    required int64 endPot = 4;

    optional Pots pots = 5;

    required HandPowerEnum handPowerEnum = 6;

    required string roomName = 7;

    required int32 createrId = 8;

    required int32 roomType = 9;

    required int32 endTime = 10;

    required int32 thinkTime = 11;

    required int32 upBlindTime = 12;

    required int64 bb = 13;

    required int32 roomId = 14;

    required string incode = 15;

    required int64 ante = 16;

    required int32 gameId = 17;

    required int32 sngStartCD=18;

    required int64 initBankRoll = 19;

    required string apply = 20;

    required int32 surchargePercent = 21;

    required int32 addoneChip = 22;

    required int32 rebuycount = 23;

    required int32 addoneCount = 24;

    required int32 currbBlindRank = 25;

    required int32 rebuyBlindRank = 26;

    required int32 curBlindRestTime = 27;

    optional int32 endSignupBlind = 28;

    optional string rebuyCost = 29;

    optional int32 rebuySurchargePercent = 30;

    required int32 signUpType = 31;

    required int32 addThinkTime = 32;

    required int32 addThinkTimeCostItemId = 33;

    required int32 addThinkTimeCostCount = 34;

    required int32 joninClubId = 35;

    required int32 insuranceTarget = 36;

    required int32 straddleTarget = 37;

    required int32 gpsIpTarget = 38;

    required int64 baseRaise = 39;

    required int64 sb = 40;

    required bool play = 41;

    optional string clubName=42;

    optional int32 clubTableNO=43;

    required int64 initPot=44;

    required int32 playType = 45;

    repeated Card bestHoleCards = 46;

    required int32 raiseLimitFixed = 47;

    required string raiseLimitPot = 48;

    optional int32 handCount = 49;

    optional int32 clubRoom = 50;

    optional string clubInviteCode = 51;

    optional bool canStart = 52;

    optional bool canOver = 53;

    optional int32 bankrollType = 54;
    repeated PublicCardCostItem item = 55;
    required int32 canBringOut = 56;
    required float minKeepMultiple = 57;
    required float bringOutMultiple = 58;
}

message ReconnectionSitInfo {

    required int32 sitId = 1;

    required int32 playerId = 2;

    required int32 endaction = 3;

    required int32 toaction = 4;

    required int64 actionTime = 5;

    required int64 bet = 6;

    required bool isDealer = 7;

    required bool isSB = 8;

    required bool isBB = 9;

    required int64 bankroll = 10;

    required int64 needCall = 11;

    required string icon = 12;

    required string playerName = 13;

    required int32 state = 14;

    required bool managed = 15;

    required int32 rank = 16;

    optional bool isStraddle = 17;

    optional bool  isforce = 18;

    required int32 takeMascot = 19;

    optional int32 sTag = 20;

    optional int32 aTag  = 21;

    optional int32 keepSitRestTime = 22;
}

message Pots{
    repeated Pot pot = 1;
}

message CommonRoomSitDownTermRequest{

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;
}

message CommonRoomSitDownTermResponse{

    required bool canSitDown = 1;

    optional int64 gold = 2;

    optional int64 baseBankRoll = 3;

    optional int32 multiple = 4;

}

message CancelCommonRoomSitDownTermRequest{

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;
}

message CancelCommonRoomSitDownTermResponse{

    required int32 sitId = 1;
}

message ConfirmBankRollRequest{

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 multiple = 3;

    required int32 sitId = 4;
}

message ConfirmBankRollResponse{

    required bool buyBankRollState =1;

    optional int32 roomId = 2;

    optional int32 gameId = 3;

    optional int32 sitId = 4;
}

message OverGameGainsShowCardRequest{

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int32 cardNO = 4;
}

message NotifyOverGameGainsShowCardResponse{

    required int32 sitId = 1;

    repeated Card card = 2;

    required int32 cardNo = 3;

    required int32 playerId = 4;

}

message AdvStandUpResponse{

    required int32 state = 1;

}

message AdvOutRoomResponse{

    required int32 state = 1;
}

message CancelStandUpRequest{
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
}

message CancelStandUpResponse{
    required int32 state = 1;
}

message CloseScorecardResponse{
    required int32 state = 1;
}

message AddThinkTimeRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;
}

message AddThinkTimeResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int32 playerId = 4;

    required int64 restActionTime = 5;

    required int32 addTime = 6;

    required int32 costItemId = 7;

    required int32 costCount = 8;
}

message InteractionItemRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required int32 interactionIndex = 4;
}

message InteractionItemResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 interactionIndex = 3;

    required int32 fromSitId = 4;

    required int32 toSitId = 5;

    required int32 costItemId = 6;

    required int32 costCount = 7;

    required int32 restCount = 8;
}

message ShowEmojiRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required string emojiId = 4;
}

message ShowEmojiResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

    required string emojiId = 4;

    required int32 playerId = 5;
}

message ReportAgroupOfCardRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required string reportPlayerIds = 3;

}

message ReportAgroupOfCardResponse {

    required int32 state = 1;
}

message HideAgroupOfCardRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required string hidePlayerId = 4;

}

message HideAgroupOfCardResponse {

    required int32 state = 1;
}

message GpsStateResponse {

    required int32 gpsIpTarget = 1;

    required int32 roomId = 2;
}

message NotifyAdvanceLeaveTable {

    required int32 playerId = 1;

    required int64 bankRoll = 2;

    required int32 bankRollType = 3;

    optional int32 serviceCost = 4;

    optional int32 serviceCostType = 5;
}

message WatchPublicCardRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;
}

message WatchPublicCardResponse {

    repeated Card card = 1;

    required int32 nextCost = 2;

    required int32 nextCostItemId = 3;

    required int32 roomId = 4;

    required int32 gameId = 5;
}

message KeepSitRequest {
    required int32 roomId = 1;
    required int32 gameId = 2;
}

message KeepSitResponse {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
    required int32 playerId = 4;

    required int32 keepSitRestTime = 5;
}

message CancelKeepSitRequest {
    required int32 roomId = 1;
    required int32 gameId = 2;
}

message CancelKeepSitResponse {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
    required int32 playerId = 4;
}

message DyPlayerRebuyNotEnough {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
    required int32 playerId = 4;
    required int32 shortType = 5;
}

message DyRefusePlayerRebuy {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
    required int32 playerId = 4;
}

message StartClubRoomReq {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 clubId = 3;
}

message StartClubRoomResp {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 state = 3;
}

message SettlementClubGame {
    required int32 roomId = 1;
    required int32 gameId = 2;
}

message BringOutInfoRequest {
    required int32 roomId = 1;
    required int32 gameId = 2;
}

message BringOutInfoResponse {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required float minKeepMultiple = 3; 
    required float bringOutMultiple = 4; 
    required int64 totalBringOut = 5; 
    required int64 baseBankRoll = 6; 
    required int64 bankRoll = 7; 
    required int32 bankRollType = 8; 

}

message BringOutRequest {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int64 count = 3; 
    required int32 bankRollType = 4; 
}

message BringOutResponse {
    required int32 roomId = 1;
    required int32 gameId = 2;
    required int32 sitId = 3;
    required int32 playerId = 4;
    required int64 count = 5; 
    required int32 bankRollType = 6; 
    required int32 status = 7; 
}

message RankInfo{
    required int32 playerId = 1;
    required string playerName = 2;
    required int32 rank = 3;
    required int64 rewardAmount = 4; 
    repeated Card cards = 5;
    required string rankDate = 6;
    required string headIcon = 7;
}

enum RankInfoType{
    TYPE_TODAY = 0;  
    TYPE_YESTERDAY = 1; 
    TYPE_HISTORY_1ST = 2; 
}

message showRankConfigReq{
     required int32 playType = 1;
     required int32 roomType = 2;
}

message showRankConfigRes{
    required int32 show = 1; 
}

message RankInfoReq{
   required RankInfoType type = 1;
   required int32 playType = 2;
}

message RankInfoRes{
   repeated RankInfo info = 1;
   optional RankInfo selfInfo = 2;
}

enum SignUpStatus {
    CanSignUp = 1;
    AlreadySignUp = 2;
    NotSignUp = 3;
    Revival = 4;
}

message RaceListRequest {

    required int32 raceType = 1;

    required int32 page = 2;

    required int64 createTime=3;
}

message RaceListResponse {

    required int32 raceCount=1;
    required int32 pageCount=2;
    optional RaceInfos raceInfos = 3;
    required int32 raceType=4;
}

message RaceInfos{
    repeated RaceInfo raceInfo=1;
}

message RaceInfo{
    required int32 id=1;
    required string raceName=2;
    required string cover=3;
    required int32 upBlind=4;
    required int32 raceType=5;
    required int64 startTime=6;
    required int32 racerNum=7;
    required string raceLimit=8;
    required int32 raceState=9;
    required int64 createTime=10;
    required int32 matchType=11;
    required int32 signupType=12;
    required int32 signUpCost=13;
    required int32 maxTableCount=14;

}

message RaceApplyRequest{
    required int32 raceId = 1;

    required string applyItemUniqueId = 2;

    required int32 clubId = 3;
}

message RaceApplyResponse{
    required string msg = 1;
    required int32 gameId = 2;
    required int32 raceId = 3;
    required bool isStarted = 4;
    required SignUpStatus signUpStatus = 5;
}

message RaceCancelApplyRequest{
    required int32 raceId = 1;
}

message RaceCancelApplyResponse{
    optional string msg = 1;
    required int32 raceId = 2;
    required bool isStarted = 3;
    required SignUpStatus signUpStatus = 4;
}

message RaceMTTRequest{
    required int32 raceId = 1;
}

message RaceMTTResponse{
    required int32 raceId=1;
    required string raceName=2;
    required int64 startTime=3;
    required int32 maxTableCount=6;
    required int32 maxRaceCount=7;
    required string raceLimit=8;
    required int32 startStack=9;

    optional uint32 roomId = 10;
    required int32 upBlind=11;

    required int32 signUpType=12;
    required string signUpCost=13;
    required int32 awardType=14;
    required int32 bonus=15;
    required int32 floatpoolType=16;
    required int32 actionTimeout=17;
    required int32 minRaceCount=18;
    required int32 rEndBlind=19;
    required int32 endSignupBlind=20;
    required int32 rebuyNum=21;
    required int32 reentryNum=22;
    required int32 addonNum=23;
    required int32 addonChip=24;
    repeated AwardTemplate awardTemplate=25;

    required int32 playersNum = 26;

    required int32 signUpFeePercent = 27;

    required int64 avgChips = 29;

    required int64 minChips = 30;

    required int64 maxChips = 31;

    required int32 curBlindLevel = 32;

    required int32 curBlindRestTime = 33;

    required string incode = 35;

    required int32 restPlayerNum = 36;

    required int32 curTableNum = 37;

    required string rebuyCost=38;

    required int32 rebuyFee = 39;

    required int32 raceType = 40;
    required bool isStarted = 41;
    required int32 signUpStatus = 42; 
}

message DefaultBlind{
    required int32 rank=1;
    required int32 smallBlind=2;
    required int32 bigBlind=3;
    required int64 anteNum=4;
}

message AwardTemplate{
    required int32 id=1;
    required int32 beginRankd=2;
    required int32 endRankd=3;
    repeated Awards items=4;

}
message Awards{
    required int32 id=1;
    required int32 itemId=2;
    required int32 itemNum=3;
}

message RacePlayerNumRequest{
    required int32 raceId = 1;

}
message RacePlayerNumResponse{
    required int32 raceId = 1;
    required int32 playerNum = 2;
    repeated RacePlayer playerList = 3;
}

message RaceStartResponse{
    required int32 raceId = 1;
    required string raceName=2;
    required int32 roomId=3;
    required int32 gameId=4;
}

message RaceFinishResponse{
    required int32 raceId = 1;
    repeated RacePlayer players=2;
}

message RacePlayer{
    required int32 playerId = 1;
    optional int32 ranking = 2;
    optional string playerName=3;
    optional int32 score=4;
    optional int32 award=5;
    optional string icon=6;

}

message StartMTTNotify {
    required int32 raceId = 1;
    required string raceName=2;
    required int32 roomId=3;
    required int32 gameId=4;

    required string incode = 5;
}

message RaceMttRewardRequest {

    required int32 raceId = 1;
}

message RaceMttRewardResponse {

    required int32 raceId = 1;

    required int32 rewardPlayerNum = 2;

    required int64 totalBonus = 3;

    repeated BonusInfo bonusInfo = 4;

    required int32 floatRewardItemId = 5;

    required int32 awardType = 6;

    optional string raceRemark = 7;
}

message BonusInfo {

    required int32 rankStart = 1;

    required int32 rankEnd = 2;

    optional int32 percent = 3;

    optional string itemsReward = 4;
}

message RaceMttRankRequest {

    required int32 raceId = 1;

    required int32 rankStart = 2;

    required int32 rankEnd = 3;
}

message RaceMttRankResponse {

    required int32 raceId = 1;

    repeated MttRankPlayer rankPlayer = 2;

    required int32 restPlayerNum = 3;

    required int32 playersNum = 4;
}

message MttRankPlayer {

    required int32 rank = 1;

    required int32 playerId = 2;

    required string playerIcon = 3;

    required string playerName = 4;

    required int32 curGameId = 5;

    required int64 bankRoll = 6;
}

message RaceMttTableRequest {

    required int32 raceId = 1;
}

message RaceMttTableResponse {

    required int32 raceId = 1;

    repeated RaceMttTable raceMttTable = 2;
}

message RaceMttTable {

    required int32 tableId = 1;

    required int32 playerNum = 2;

    required int64 minChips = 3;

    required int64 maxChips = 4;
}

message RaceMTTGameIdRequest {

    required int32 roomId = 1;

    required int32 playerId = 2;
}

message RaceMTTGameIdResponse {

    required int32 roomId = 1;

    required int32 playerId = 2;

    required int32 gameId = 3;
}

message RaceMTTBlindRequest {

    required int32 raceId = 1;
}

message RaceMTTBlindResponse {

    required int32 raceId = 1;
    repeated DefaultBlind blinds=2;
}

message MTTRevivalRequest {

    required int32 raceId = 1;

    required string revivalItemUniqueId = 2;
}

message MTTRevivalResponse {

    required int32 raceId = 1;

    required bool suc = 2;
}

message ConmmonRankRequest{

	required int32 roomId = 1;

	required int32 gameId = 2;

}

message ConmmonRankResponse{

	required int32 roomId = 1;

	required int32 gameId = 2;

	required int32 handCount = 3;

	required int64 allBankRoll = 4;

	required int64 avgEndPot = 5;

	required int32 avgHandCostTime = 6;

	required int32 endTime = 7;

	repeated OnLookers onLookers = 8;

	repeated ConmmonRank conmmonRank = 9;

	required int32 playerId = 10;

    optional int64 insurancePool = 11;
}

message OnLookers{

	required int32 playerId = 1;

	required string playerName = 2;

	required string icon = 3;
}

message ConmmonRank{

	required int32 playerId = 1;

	required string icon = 2;

	required string playerName = 3;

	required int64 bankroll = 4;

	required int64 gains = 5;

	required int32 inGame = 6;

    required bool advLeven = 7;

	required int32 handCount = 8;
}

message SngRoomRank{

	required int32 roomId = 1;

	required int32 gameId = 2;
}

message SngRoomRankResponse{

	required int32 roomId = 1;

	required int32 gameId = 2;

	required int32 handCount = 3;

	required int32 playerCount = 4;

	required int32 allPlayerCount = 5;

	required int32 nowBlindRank = 6;

	required int32 nowBb = 7;

	required int32 nextBlindRank = 8;

	required int32 nextBb = 9;

	required int32 avgHandCostTime = 10;

	required int32 upBlindTime = 11;

	repeated OnLookers onLookers = 12;

	repeated SNGRank sNGRank = 13;

	required int32 playerId = 14;

    required int32 sb = 15;

    required int32 nextSb = 16;
}

message SNGRank{

	required int32 playerId = 1;

	required string icon = 2;

	required string playerName = 3;

	required int64 nowBankroll = 4;

	required int32 rank = 5;
}

message NotifyReLogin {

    required bool relogin = 1;
}

message RecordListRequest {
    required uint32 roomType = 1;
    required uint32 playType = 2;

    required int32 page = 3;
}

message RecordListResponse {

	required int32 nowPage = 1;

	required int32 nextPage = 2;

    optional Records Records = 3;
}

message Records{
    repeated Record record=1;
}

message Record{

	required int32 id=1;

    required int32 playerId=2;

    required int32 roomType=3;

    required string recordName=4;

    required int32 recordType=5;

    required string roomCreaterName=6;

    required string roomCreaterIcon=7;

    required string createTime=8;

    required string startTime=9;

    required int32 duration=10;

    required int64 bb=11;

    required int64 ante=12;

    required int64 gains=13;

    required int32 rank=14;

    required int32 playerCount=15;

    required int32 upblindTime=16;

    required int64 initBankRoll=17;

    required int32 detailId=18;

	required string itemReward =19;

    required int32 insurance = 20;

    required int32 straddle =21;

    required int64 sb = 22;

    required int32 playType = 23;
}

message RecordDetailRequest{
	required int32 id=1;
}

message RecordDetailResponse{

	required int32 id=1;

    required int32 handCount=2;

    required int64 maxPot=3;

    required int64 allBankRoll=4;

    required int32 rtype=5;

    required string apply=6;

    required int64 initBankRoll=7;

    required int32 upBlindTime=8;

    repeated RecordDetailInfo recordDetailInfo=9;

	required string roomName = 10;

	required string createrName = 11;

	required string createrIcon = 12;

	required int32 sitCount = 13;

	required string createTime = 14;

	required int32 gameTime = 15;

	optional int64 bb = 16;

	optional int64 mttallbouns= 17;

    optional string startTime = 18;

    required int32 playerCount = 19;

    required int32 totalRebuyCount = 20;

    required int32 signUpType = 21;

    optional int32 floatRewardItemId = 22;

    required int32 insurance = 23;

    required int32 straddle =24;

    required int64 sb = 25;

    optional int32 clubRoom=26;
}

message RecordDetailInfo{

	required int32 playerId=1;

    required string playerName=2;

    required string icon=3;

    required int32 buyCount=4;

    required int64 gains=5;

    required int64 bankRoll=6;

    required int32 rank=7;

	required string itemReward=8;

    optional int64 totalInsurance = 9;

    required int32 handCount = 10;
}

message RedPacketRankRequest {
}
message RedPacketRankResponse {
    repeated RedPacketRank rank = 1;
}

message RedPacketRank {
    required int32 rankId = 1; 
    required string playerName = 2; 
    required string playerIcon = 3; 
    required int32 playerId = 4; 
    required int64 money = 5; 
    required string time = 6; 
}

message RedPacketActivityRequest {
}

message RedPacketActivityResponse {
    required int32 show = 1; 
}

message ReplayRequest {
    required uint32 id = 1;
}

message ReplayResponse {
    required uint64 startTime = 1;
    repeated ReplayStage stages = 2;
    required uint32 roomId = 3;
    required string roomName = 4;
    required string invitationCode = 5;
    required uint32 creatorId = 6;
    required uint32 bb = 7;
    required uint32 pot = 8;
    required uint32 roomType = 9;
    required uint64 endTime = 10;
}

message ReplayInfo {
    required uint32 id = 1;
    required uint32 playerId = 2;
    required uint32 replayId = 3;
    required uint32 gameType = 4;
    required uint32 playerNum = 5;
    required uint32 bb = 6;
    required uint32 ante = 7;
    required sint32 income = 8;
    required fixed32 time = 9;
    required uint32 creatorId = 11;
    required uint32 hand = 12;
    required string roomName = 13;
}

message ReplayListRequest {
    required uint32 page = 1;
    required uint32 pageSize = 2;
    required uint32 gameType = 3;
}

message ReplayListResponse {
    required uint32 page = 1;
    repeated ReplayInfo infoList = 2;
    required uint32 pagetTotal = 3;
    required uint32 gameType = 4;
}

message ReplayLastRequest {
    required uint32 roomId = 1;
    required uint32 gameId = 2;
}

message ReplayLastResponse {
    required uint32 replayId = 1;
    required ReplayResponse replay = 2;
}

enum ReplayAction {
    Bet = 1;
    Call = 2;
    Fold = 3;
    Check = 4;
    Raise = 5;
    ReRaise = 6;
    AllIn = 7;
}

enum ReplayStage {
    PreFlop = 1;
    Flop = 2;
    Turn = 3;
    River = 4;
}

message ReplayPlayer {
    required uint32 sitId = 1;
    required string playerName = 2;
    required string playerIcon = 3;
    required uint32 gold = 4;
    repeated uint32 cards = 5;
}

message ReplayGain {
    required uint32 sitId = 1;
    required sint32 gold = 2;
}

message ReplayGameInfo {
    required ReplayPlayer players = 1;
    required string roomName = 2;
    required uint32 roomType = 3;
    required string creatorIcon = 4;
    required uint32 bigBlind = 5;
}

message ReplayPlayerAction {
    required uint64 timeOff = 1;
    required uint32 sitId = 2;
    required ReplayAction action = 3;
    required uint32 gold = 4;
}

message ReplayGameStage {
    required uint64 timeOff = 1;
    required ReplayStage stage = 2;
    repeated uint32 cards = 3;
}

message ReplayGameGains {
    repeated ReplayGain gain = 1;
}

enum RoomListType {
    RoomListOfficial = 0;
    RoomListClub = 1;
    RoomListPersonal = 2;
}

enum UpdateType {
    Created = 1;
    Deleted = 2;
    Updated = 3;
}

enum EmptyCause {

    ClubActivity = 1;

    NoneResult = 2;
}

message RoomSng {
    required string apply = 1;
    required int64 chip = 2;
    required uint32 blindingTime = 3;
    required uint32 signUpFeePercent = 4;
}

message Room {
    required uint32 id = 2;
    required uint32 serverId = 3;
    required string invitationCode = 4;
    required string roomName = 5;
    required int64 bb = 6;
    required uint32 playerCountLimit = 7;
    required uint32 roomType = 8;
    required string ip = 10;
    required uint32 port = 11;
    required uint32 gameId = 12;
    required uint32 playerCount = 13;
    required uint64 createTime = 14;
    required uint32 leftTime = 15;
    optional bool isEntered = 16;
    required uint32 totalTime = 17;
    required bool isStarted = 18;
    required string creatorIcon = 19;
    required string creatorName = 20;
    optional RoomSng roomSng = 21;
    optional int32 clubId = 22;
    optional int32 raceId = 23; 
    optional int32 signUpStatus = 24; 
    optional int32 startTime = 25;
    optional int64 ante = 26;
    required int32 order = 27;
    optional bool hasRebuy = 28; 
    optional bool hasAddon = 29; 

    required int32 signUpType = 30;

    optional bool insurance = 31;
    optional int64 baseBankroll = 32; 
    optional int32 multiple = 33; 

    optional int32 straddle = 34;

    required int64 sb = 35;

    optional string sngReward = 36;

    required int32 playType = 37;
    optional int32 privateRoom = 38;
    optional int32 floatRewardItemId=39;
    optional string endTime=40;
}

message CommonRoomListRequest {

    required int32 clubId = 1;

    repeated int32 playType = 2;

    optional bool hideFull = 3;

    optional bool hideEmpty = 4;

    repeated RoomFilterPlayerCount playCount = 5;

    repeated RoomFilterRestTime restTime = 6;

    repeated RoomTemple roomTemple = 7;

    repeated int64 bb = 8;

    optional int32 ante = 9;

    optional int32 straddle = 10;

    required int32 startRoomId = 11;

    optional int64 version = 12;

    repeated string shortAnte = 13;

    optional bool isFilter = 14;

}

message CommonRoomListResponse {
    repeated Room rooms = 1;

    required int32 pageSize = 2;

    required int32 totalSize = 3;

    required int32 startRoomId = 4;

    optional EmptyCause emptyCause = 5;

    required int32 startRoomCount = 6;

     optional int64 version = 7;

}

message RaceRoomListRequest {
    required int32 clubId = 1;
    required int32 sngormtt = 2; 
}

message RaceRoomListResponse {
    required int32 sngormtt = 1; 
    repeated Room rooms = 2;
}

message RoomUpdateRequest {
    required int32 clubId = 1;
    repeated RequestRoom requestRoom = 2;
}

message RequestRoom {
    required int32 roomId = 1;
    required int32 sngormtt = 2; 
}

message RoomUpdateResponse {
    repeated UpdateRoom updateRooms = 1;
}

message UpdateRoom {
    required int32 roomId = 1;
    required bool isStarted = 2;
    required int32 playerCount = 3;
    optional int32 leftTime = 4;
    required int32 sngormtt = 5; 
    optional int32 playerCountLimit = 6;
}

message MyRoomListRequest {
    required int32 clubId = 1;
}

message MyRoomListResponse {
    repeated Room rooms = 1;
}

message RoomTemple {
    required int64 bb = 1;

    required bool straddle = 2;

    required bool insurance = 3;

    required bool ante = 4;

    optional int32 limitCount = 5;

    optional int32 index = 6;
}

message RoomFilterPlayerCount {
    required int32 playCountMin = 1;
    required int32 playCountMax = 2;
}

message RoomFilterRestTime {
    required int32 restTimeMin = 1;
    required int32 restTimeMax = 2;
}

message RoomUpdateNotify {
    required UpdateType type = 1;
    repeated Room rooms = 2;
    required RoomListType listType = 3;
}

message RoomInfoRequest {

    optional int32 roomId = 1;
    optional int32 raceId = 2;
}

message RoomInfoResponse {
    required Room room = 1;
}

message ClubRoomInfoRequest {

    required int32 clubId = 1;

    repeated int32 playType = 2;

    optional bool hideFull = 3;

    optional bool hideEmpty = 4;

    repeated RoomFilterPlayerCount playCount = 5;

    repeated RoomFilterRestTime restTime = 6;

    repeated RoomTemple roomTemple = 7;

    repeated int64 bb = 8;

    optional int32 ante = 9;

    optional int32 straddle = 10;

    required int32 startRoomId = 11;
}

message ClubRoomInfoResponse {
    repeated Room rooms = 1;

    required int32 pageSize = 2;

    required int32 totalSize = 3;

    required int32 startRoomId = 4;

    optional EmptyCause emptyCause = 5;

    required int32 startRoomCount = 6;

    optional int32 corpus = 7;
}

message ShowPlayerInfoInRoomRequest {

   required int32 targetPlayerId = 1;

   optional int32 roomId = 2;

   optional int32 roomType = 3;

   optional int32 playType = 4;

   optional int32 gameId = 5;

   optional int32 sitId = 6;
}

message ShowPlayerInfoInRoomResponse{

   required int32 playerId =1;

   required string playerName =2;

   required string icon = 3;

   required int32 gender = 4;

   optional int64 diamond = 5;

   optional int64 gold = 6;

   optional string signature = 7;

   required int32 handCount = 8;

   required string vpRate = 9;

   required int32 joinRaceCount = 10;

   required int32 rewardCount = 11;

   required int32 takeMascot = 12;

   repeated int32 haveMascot = 13;

   repeated InteractionItem interactionItem = 14;

   optional int64 masterScore = 15;

   required int32 vip = 16;

   optional PlayerItem costItem = 17;

   optional CareerProcessData careerProcessData = 18;

   optional int32 roomId = 19;

   optional int32 gameId = 20;

   optional int32 sitId = 21;
}

message DeductPlayersItemRequest{
   required PlayerItem costItem = 1;

   required int32 targetPlayerId = 2;

   optional int32 roomType = 3;

   optional int32 playType = 4;
}

message DeductPlayersItemResponse{
   required PlayerItem playerCurrentItem = 1;
   required CareerProcessData careerProcessData = 2;
}

message InteractionItem {

    required int32 index = 1;

    required int32 costItemId = 2;

    required int32 costNum = 3;
}

message CancelSngApplyRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;
}

message CancelSngApplyResponse {

    required bool outReuslt = 1;

}

message NotifyCancelSngApplyResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

}

message SngDetailRequest{

   required int32 roomId =1;
}

message SngDetailResponse{

   required int32 roomId =1;

   required int32 rank = 2;

   repeated RaceBlindTable raceBlindTable = 3;

   repeated SngBonusInfo sngBonusInfo = 4;

   required int64 allBonus = 5;

   required int32 bonusType = 6;

   required int32 floatRewardItemId = 7;
}

message SngBonusInfo {

    required int32 rankStart = 1;

    optional int64 gold = 2;

    optional string itemsReward = 3;
}

message NotifyTrusteeshipResponse {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 playerId = 3;

    required int32 sitId = 4;

    required bool trusteeship = 5;
}

message CancelTrusteeshipRequest {

    required int32 roomId = 1;

    required int32 gameId = 2;

    required int32 sitId = 3;

}

message VideoInfoListRequest {

    required int32 recordId = 1;

    required int32 page = 2;

    required int32 sort = 3;
}

message VideoInfoListResponse {

    required int32 recordId = 1;

    required int32 page = 2;

    repeated VideoInfo videoInfo = 3;

    required int32 perPageCount = 4;

    required int32 totalCount = 5;

    required int32 roomType = 6;
}

message CollectVideoRequest {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;
}

message CollectVideoResponse {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;
}

message CancelCollectVideoRequest {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;
}

message CancelCollectVideoResponse {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;
}

message HandReviewCollectVideoRequest {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;
}

message HandReviewCollectVideoResponse {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;

    required bool isCollected = 4;
}

message CollectVideoListRequest {

}

message CollectVideoListResponse {

    repeated VideoInfo videoInfo = 1;

    required int32 collectedCount = 2;

    required int32 allCollectCount = 3;
}

message VideoInfo {

    required int32 recordId = 1;

    required int32 gameId = 2;

    required int32 handCount = 3;

    required int64 handBeginTime = 4;

    repeated Card holeCards = 5;

    required int32 endHandPowerType = 6;

    repeated Card pubCards = 7;

    required int64 selfProfit = 8;

    required bool collected = 9;

    optional int32 showPlayerId = 10;

    optional string showPlayerName = 11;

    required string roomName = 12;

     required int32 floatRewardItemId=13;
}

message VoiceRoomRequest {
    required uint32 roomId = 1;
    required uint32 gameId = 2;
    required string voiceId = 3;
}

message VoiceRoomResponse {
}

message VoiceRoomNotify {
    required uint32 playerId = 1;
    required uint32 roomId = 2;
    required uint32 gameId = 3;
    required string voiceId = 4;
}

message OpenWalletPayRequest{

}

message OpenWalletPayResponse{
    required int32 playerId = 1;
    required string playerName = 2;
    required int64 masterscore = 3;
    repeated string mainPayType = 4;
    repeated string otherPayType = 5;
}

message PayRequest{
    required int32 amount =1 ;
    required string bankid = 2;
}

message PayResponse{
    required string error = 1;
    required string url = 2;
}

message OrderInfoRequest {

    required int32 type = 1;
}

message OrderInfoResponse {
    repeated OrderInfo orderInfos = 1;
}

message OrderInfo{

    required string orderId = 1;

    required string time = 2;

    required int64 amount = 3;

    required int32 status = 4;

    required int32 type = 5;
}

message SetBankCardRequest{
    required string cardId = 1;
    required string confirmCardId = 2;
    required int32 bankInfo = 3;
    required string trueName = 4;
}

message BankCardResponse{
    required int64 masterscore  = 1;
    required int32 playerId = 2;
    required string bankId = 3;
    required string bankName = 4;
    required string trueName = 5;
    required uint32 drawCount = 6;
}

message OpenWalletDrawRequest{
    required string walletPassword = 1;
}

message OpenWalletDrawResponse{
    required bool bindBackCard = 1;
    optional int64 masterscore = 2;
    optional int32 playerId = 3;
    optional string bankId = 4;
    optional string bankName = 5;
    optional string trueName = 6;
    optional uint32 drawCount = 7;
}

message DrawRequest{
    required uint32 amount = 1;
}

message DrawResponse{
    required OrderInfo orderInfo = 1;
    required int64 masterscore = 2;
}

message DrawCallBackResponse{
    required bool isSuccess = 1;
    required OrderInfo orderInfo = 2;
}

message SetWalletPwdRequest {

    required string walletPwd = 1;

    required string captcha = 2;

    optional string phone = 3;

    optional string nationCode = 4;
}

message SetWalletPwdResponse {

    required bool suc = 1;
}

message WorldMessageNotify {
    optional int32 contentCode = 1;
    optional string content = 2;
    required int32 loop = 3;
    repeated contentParam contentParam = 4;
    optional int32 notifyType = 5; 
    optional int32 templateId = 6; 
}

message contentParam {
    required string contentParam = 1;
}
